<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-hunt-secevent-sstp-00"
	ipr="trust200902">
	<front> 
		<title abbrev="draft-hunt-secevent-sstp">
			Symmetric SET Transfer Protocol</title>

		<author fullname="Phil Hunt" initials="P." role="editor"
			surname="Hunt">
			<organization abbrev="Oracle">Oracle Corporation</organization>

			<address>
				<email>phil.hunt@yahoo.com</email>
			</address>
		</author>
    
		<date year="2018" />

		<keyword>Internet-Draft</keyword>

		<abstract>
			<t>
				This specification defines how security event tokens 
        (SETs) may be exchanged between a client and service provider 
        using HTTP POST over TLS using a symmetric format. The 
        specification supports three modes
        of operation: "push", "pull", and "push-pull" bi-directional SET 
        exchange. The specification also defines a simple acknowledge
        mechanism allowing parties to confirm delivery.
        </t>
		</abstract>
	</front>

	<middle>
		<section anchor="intro" title="Introduction" toc="default">
			
      <t>[EDITORS NOTE:  This specification is based upon 
      draft-ietf-secevent-delivery and attempts to provide a 
      unified single MTI protocol solution satisfying all use 
      cases for SECEVENTS.]</t>

      <t>
      This specification defines how SETs (see <xref target="I-D.ietf-secevent-token"/>)
      can be exchanged using HTTP <xref target="RFC7231"/> over 
      TLS using a symmetric request/response format. 
      The specification supports three modes of operation: "push",
      "pull", and "push-pull" bi-directional SET exchange. The 
      specification also defines a simple acknowledge mechanism 
      allowing parties to confirm delivery or attempt re-delivery.</t>
      
      <t>
      This specification makes several simplifying assumptions:
      <list style="symbols">
        <t>SSTP is a symmetric protocol meaning it uses the same 
        HTTP content-type and JSON structure to send requests and 
        process responses</t>
        
        <t>Recovery is provided for unacknowledged SETs for
        short term or missed deliveries. Issuers are able to 
        re-transmit SETs in situations where a SET has been 
        unacknowledged (e.g. over more than one request/response
        cycles).</t>
        
        <t>The protocol can be used for unidirectional, or bi-directional
        communication avoiding the need to implement multiple 
        delivery methods.</t>
        
        <t>The use of HTTP Long Polling MAY be used in cases where 
        pull or bi-directional communication is needed in real time.</t>
        
        <t>Only one party in an exchange needs to have an addressable
        fixed URI endpoint and can act as an SSTP protocol service
        provider to a mobile or otherwise unrechable client.</t>
        
        <t>SET message exchanges are secured through the use of TLS
        and some form of HTTP authorization (e.g. RFC6750, RFC7519),
        and MAY in turn be signed and encrypted.</t>
      </list> </t>

      <t>This specification supports the following use-cases:<list style="hanging">
        <t hangText="Broadcaster"><vspace/>Where a large entity (e.g. an Identity Provider)
        needs to issue SETs to a large number of relying parties.</t>
        <t hangText="Protected Client"><vspace/>Where a client party is behind a
        firewall or otherwise network restricted location and cannot
        act as a SSTP service provider. Examples include Enterprise 
        on-premise security systems, IoT devices which may be shielded 
        in restricted network environments.</t>
        <t hangText="Mobile"><vspace/>Where a client is mobile and thus would be
        unable to maintain a permanent HTTP endpoint.</t>
      </list> </t>
        
      <t>This specification does not define how endpoints are 
      configured, nor does it define the specifics of which SET 
      event types are exchanged over any particular delivery
      relationship.</t>

			<section anchor="notat" title="Notational Conventions" toc="default">
				<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
                                  NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
                                  "MAY", and "OPTIONAL" in this document are to be interpreted as
                                  described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
				  when, and only when, they appear in all capitals, as shown here.
			        </t>

				<t>
					For purposes of readability examples are not URL encoded.
					Implementers MUST percent encode URLs as described in
					<xref target="RFC3986">Section 2.1 of</xref>
					.
				</t>

				<t>Throughout this documents all figures MAY contain 
        spaces and extra line-wrapping for readability and space 
        limitations. Similarly, some URI's contained within 
        examples, have been shortened for space and readability 
        reasons. All examples are non-normative.
				</t>
			</section>

			<section anchor="defs" title="Definitions" toc="default">
        <t>This specification assumes terminology defined in the Security
        Event Token specification<xref target="I-D.ietf-secevent-token"/>
        .</t>
				<t>
					This specification defines the following terms:
					<list style="hanging">
          
            <t hangText="Client">An entity which acts as an HTTP 
            client as defined by <xref target="RFC7231"/> which
            is communicating with an SSTP server.</t>
             
            <t hangText="Server">An entity which has a permanent
            endpoint reachable by a client which acts as an HTTP
            server as defined by <xref target="RFC7231"/> and
            supports this specification.</t>
                          
            <t hangText="Event"><vspace/>An Event is defined to be an 
            event as represented by a security event token (SET).
            See <xref target="I-D.ietf-secevent-token"/>.</t>

            <t hangText="NumericDate"><vspace/>
            A JSON numeric value representing the number of seconds from
            1970-01-01T00:00:00Z UTC until the specified UTC date/time,
            ignoring leap seconds.  This is equivalent to the 
            IEEE Std 1003.1, 2013 Edition <xref target="POSIX.1"/> 
            definition "Seconds Since the Epoch", in which each day is 
            accounted for by exactly 86400 seconds, other than that 
            non-integer values can be represented.  See 
            <xref target="RFC3339"/> for details regarding date/times 
            in general and UTC in particular.</t>
      
					</list>
				</t>
			</section>
		</section>
   
  <section title="Simple SET Transfer Protocol">
    
    <t>SSTP is a symmetric protocol. As such an SSTP client 
    uses HTTP POST (<xref target="RFC7231">Section 4.3.3</xref>)
    with a body with <spanx style="verb">Content-Type</spanx> of
    <spanx style="verb">application/sstp+json</spanx> to deliver
    0 or more SETs and/or to acknowledge previously
    received SETs from an SSTP server. In response, the SSTP
    server returns an HTTP body with the same document-type which
    may also return 0 or more SETs, acknowledgments, and errors.</t>
       
    <t>Requests MAY be spontaneous (in the case of push mode), 
    scheduled over a a periodic interval (in the case of pull), 
    or requests to pull MAY await new SETS using HTTP long polling 
    (see <xref target="RFC6202">Section 2</xref>). An SSTP
    server choosing NOT to support HTTP long polling MAY do so
    by returning HTTP Status of 403 "Forbidden" (see 
    <xref target="RFC7231">Section 6.5.3</xref>) if a 
    particular client is not authorized, or HTTP status 501 
    "Not implemented" 
    (see <xref target="RFC7231">Section 6.6.2</xref>) if the server 
    does not support long polling.</t>
                          
    <t>SSTP provides an acknowledgement capability for the
    purpose of informing communications partners about which SETs 
    have been successfully delivered. Upon receipt of a SET and 
    before acknowledgement, receivers SHOULD ensure received SETs 
    are valid and have been retained in a manner appropriate to 
    the receiver's retention needs. The level and method of 
    retention of SETs by receivers is out-of-scope of this 
    specification.</t>
    
    <t>If after a period of time, negotiated between the client
    and server, unacknowledged SETs MAY be re-transmitted. 
    The receiver SHOULD accept repeat SETs and acknowledge the 
    SETs regardless of whether the receiver believes it has 
    already acknowledged the SETs previously. A SET issuer
    MAY limit the number of attempts to deliver a SET. 
    </t>
       
    <t>A receiving party (client or server) of SETs SHOULD parse  
    and validate each SET to meet its own requirements and SHOULD 
    acknowledge receipt in a timely (e.g. minutes) fashion so 
    that the issuer may mark the SETs as received. Receivers 
    SHOULD acknowledge receipt before taking any local actions 
    based on the SETs to avoid unnecessary delay in 
    acknowledgement to avoid unnecessary re-transmission.</t>
 
    <section anchor="pollReqAttrs" title="SSTP Message Format (Content-Type: application/sstp+json)">
       
       <t>The body (or message) of an SSTP request or response is a 
       <spanx style="verb">Content-Type</spanx> of 
       <spanx style="verb">application/sstp+json</spanx> which is
       a JSON document consisting of the following optional JSON 
       attributes:
       <list style="hanging">
       
         <!-- Request parameters -->
         <t hangText="Request Handling:"/>
         
         <t hangText="returnEvents"><vspace/>A JSON boolean 
         parameter which indicates whether the receiver SHOULD
         return SETs in its upcoming response. When part of an 
         HTTP Request, it indicates the SSTP server SHOULD
         return with SETs in its response (and optionally wait). 
         When asserted as <spanx style="verb">false</spanx> by an 
         SSTP server in its response, it indicates that the SSTP 
         server is not requesting SETs in the next client request. 
         If omitted, this attribute SHALL have a default value of 
         <spanx style="verb">true</spanx>.
         </t>
         
         <t hangText="returnImmediately"><vspace/>An OPTIONAL JSON 
         boolean value which when <spanx style="verb">true</spanx>
         has the effect of declining HTTP long polling. A value 
         of <spanx style="verb">false</spanx> 
         indicates the request is to be treated as an HTTP Long Poll (see 
         <xref target="RFC6202">Section 2</xref>). When asserted
         in an HTTP response, the value indicates the SSTP has
         more information and the client SHOULD NOT wait before
         initiating its next request. When omitted, the default 
         value of <spanx style="verb">false</spanx> SHALL be 
         assumed.</t> 

         <!-- Delivery parameters -->
         <t hangText="Delivery:"/>
         
         <t hangText="sets"><vspace/>A JSON object that contains one 
         or more nested JSON attributes. Each nested attribute 
         corresponds to the <spanx style="verb">jti</spanx> of a SET to 
         be delivered and whose value is a JSON String containing the 
         value of the encoded corresponding SET. If there are no 
         SETs to be transmitted, the attribute MAY be omitted.</t>
          
         <!-- Acknowledgement parameters -->
         <t hangText="Acknowledgment:"/>  
 
         <t hangText="ack"><vspace/>An array of Strings that each
         correspond to the <spanx style="verb">jti</spanx> of a 
         successfully received SET by the client. If there are no 
         outstanding SETs to acknowledge, the attribute MAY be omitted. 
         When acknowledging a SET, the issuer is released from
         any obligation to retain the SET (e.g. for a future re-try).</t>
          
         <t hangText="setErrs"><vspace/>A JSON Object that contains 
         one or more nested JSON attributes that correspond to the 
         <spanx style="verb">jti</spanx> of each invalid SET received.
         The value of each is a JSON object whose contents is an
         <spanx style="verb">err</spanx> attribute and 
         <spanx style="verb">description</spanx> attribute whose value 
         correspond to the errors described in <xref target="errorResponse"/>.
         If there are no errors to acknowledge, the attribute MAY
         be omitted.</t>    
       </list>
       </t>
        
       <figure anchor="exampleDoc" title="Example Request or Response Document">
       <preamble>The following is an example SSTP message that could
       be exchanged either in a HTPP POST request or response between
       a client and an SSTP server.</preamble>
       <artwork>{
"returnImmediately":true,
"returnEvents":true,       
"sets":{
  "4d3559ec67504aaba65d40b0363faad8":
   "eyJhbGciOiJub25lIn0.
   eyJqdGkiOiI0ZDM1NTllYzY3NTA0YWFiYTY1ZDQwYjAzNjNmYWFkOCIsImlhdCI6MTQ
   1ODQ5NjQwNCwiaXNzIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tIiwiYXVkIjpbIm
   h0dHBzOi8vc2NpbS5leGFtcGxlLmNvbS9GZWVkcy85OGQ1MjQ2MWZhNWJiYzg3OTU5M
   2I3NzU0IiwiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tL0ZlZWRzLzVkNzYwNDUxNmIx
   ZDA4NjQxZDc2NzZlZTciXSwiZXZlbnRzIjp7InVybjppZXRmOnBhcmFtczpzY2ltOmV
   2ZW50OmNyZWF0ZSI6eyJyZWYiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcn
   MvNDRmNjE0MmRmOTZiZDZhYjYxZTc1MjFkOSIsImF0dHJpYnV0ZXMiOlsiaWQiLCJuY
   W1lIiwidXNlck5hbWUiLCJwYXNzd29yZCIsImVtYWlscyJdfX19.",
  "3d0c3cf797584bd193bd0fb1bd4e7d30":
   "eyJhbGciOiJub25lIn0.
   eyJqdGkiOiIzZDBjM2NmNzk3NTg0YmQxOTNiZDBmYjFiZDRlN2QzMCIsImlhdCI6MTQ
   1ODQ5NjAyNSwiaXNzIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tIiwiYXVkIjpbIm
   h0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZWVkcy85OGQ1MjQ2MWZhNWJiYzg3OTU5M
   2I3NzU0IiwiaHR0cHM6Ly9qaHViLmV4YW1wbGUuY29tL0ZlZWRzLzVkNzYwNDUxNmIx
   ZDA4NjQxZDc2NzZlZTciXSwic3ViIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tL1V
   zZXJzLzQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJldmVudHMiOnsidXJuOmlldG
   Y6cGFyYW1zOnNjaW06ZXZlbnQ6cGFzc3dvcmRSZXNldCI6eyJpZCI6IjQ0ZjYxNDJkZ
   jk2YmQ2YWI2MWU3NTIxZDkifSwiaHR0cHM6Ly9leGFtcGxlLmNvbS9zY2ltL2V2ZW50
   L3Bhc3N3b3JkUmVzZXRFeHQiOnsicmVzZXRBdHRlbXB0cyI6NX19fQ."
 }
}</artwork>
       </figure>
     </section>
           
     <section anchor="reqVariations" title="Examples">
       
       <t>Three examples are provided where:<list style="symbols">
         <t>A client pushes SETs to a server using the 
         <spanx style="verb">sets</spanx> JSON attribute in its 
         request and receives "ack" values in response from the SSTP server.</t>
         
         <t>A polling client that requests SETs from a a server and uses 
         the <spanx style="verb">ack</spanx> parameter in
         its request to acknowledge SETs from a previous HTTP
         request, and receives new SETs in the response.</t>
         
         <t>A client and SSTP server bi-directionally exchange 
         SETs using both the <spanx style="verb">sets</spanx> and 
         <spanx style="verb">ack</spanx> JSON attributes in both the request 
         and response messages.</t>
       </list></t>
        
       <section title="Example Push Transfer">
         <t>In this example, a client posts SETs to an SSTP
         server which in turn acknowledges the transferred
         SETs in its response.</t>
         
         <figure anchor="pushExampleReq" title="Example Push Request">
         <preamble>In the figure, two SETs are transferred
         to the SSTP server. The parameter 
         <spanx style="verb">returnEvents</spanx> indicates the
         client is not interested in receiving SETs.</preamble>
         <artwork>POST /Events  HTTP/1.1

Host: notify.exampleidp.com
Authorization: Bearer h480djs93hd8
Content-Type: application/sstp+json
Accept: application/sstp+json
{
"returnImmediately":true,
"returnEvents":false,       
"sets":{
  "4d3559ec67504aaba65d40b0363faad8":
   "eyJhbGciOiJub25lIn0.
   eyJqdGkiOiI0ZDM1NTllYzY3NTA0YWFiYTY1ZDQwYjAzNjNmYWFkOCIsImlhdCI6MTQ
   1ODQ5NjQwNCwiaXNzIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tIiwiYXVkIjpbIm
   h0dHBzOi8vc2NpbS5leGFtcGxlLmNvbS9GZWVkcy85OGQ1MjQ2MWZhNWJiYzg3OTU5M
   2I3NzU0IiwiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tL0ZlZWRzLzVkNzYwNDUxNmIx
   ZDA4NjQxZDc2NzZlZTciXSwiZXZlbnRzIjp7InVybjppZXRmOnBhcmFtczpzY2ltOmV
   2ZW50OmNyZWF0ZSI6eyJyZWYiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcn
   MvNDRmNjE0MmRmOTZiZDZhYjYxZTc1MjFkOSIsImF0dHJpYnV0ZXMiOlsiaWQiLCJuY
   W1lIiwidXNlck5hbWUiLCJwYXNzd29yZCIsImVtYWlscyJdfX19.",
  "3d0c3cf797584bd193bd0fb1bd4e7d30":
   "eyJhbGciOiJub25lIn0.
   eyJqdGkiOiIzZDBjM2NmNzk3NTg0YmQxOTNiZDBmYjFiZDRlN2QzMCIsImlhdCI6MTQ
   1ODQ5NjAyNSwiaXNzIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tIiwiYXVkIjpbIm
   h0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZWVkcy85OGQ1MjQ2MWZhNWJiYzg3OTU5M
   2I3NzU0IiwiaHR0cHM6Ly9qaHViLmV4YW1wbGUuY29tL0ZlZWRzLzVkNzYwNDUxNmIx
   ZDA4NjQxZDc2NzZlZTciXSwic3ViIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tL1V
   zZXJzLzQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJldmVudHMiOnsidXJuOmlldG
   Y6cGFyYW1zOnNjaW06ZXZlbnQ6cGFzc3dvcmRSZXNldCI6eyJpZCI6IjQ0ZjYxNDJkZ
   jk2YmQ2YWI2MWU3NTIxZDkifSwiaHR0cHM6Ly9leGFtcGxlLmNvbS9zY2ltL2V2ZW50
   L3Bhc3N3b3JkUmVzZXRFeHQiOnsicmVzZXRBdHRlbXB0cyI6NX19fQ."
 }
}</artwork></figure>

         <figure anchor="pushExampleResp" title="Example Push Response">
         <preamble>The figure below shows the response 
         returned from the SSTP server in response to the request
         in <xref target="pushExampleReq"/></preamble>
         <artwork>HTTP/1.1 200 OK
Content-Type: application/sstp+json
Location: https://notify.exampleidp.com/Events

{
  "ack":[
    "4d3559ec67504aaba65d40b0363faad8",
    "3d0c3cf797584bd193bd0fb1bd4e7d30"
  ]
}
         </artwork>
         </figure>
       
       </section>
       
       <section title="Example Pull Transfer"> 
         
         <figure anchor="pollInitRequest" title="Example Initial Pull Request">
         <preamble>The figure below is an example pull request 
         to the SSTP server whose location is: 
         <spanx style="verb">https://nofity.exampleidp.com/Events</spanx>.
         In this example, the client is requesting an 
         immediate response whether or not new SETs are available.</preamble>
         <artwork align="left">POST /Events  HTTP/1.1

Host: notify.exampleidp.com
Authorization: Bearer h480djs93hd8
Content-Type: application/sstp+json
Accept: application/sstp+json

{
 "returnImmediately":true
}</artwork>
         </figure>
         
         <figure anchor="pollDefaultRequest" title="Example Default Pull Request">
         <preamble>The following is an example default pull request
         to the SSTP server whose location is: 
         <spanx style="verb">https://nofity.exampleidp.com/Events</spanx>.
         The default mode to return events and to wait if necessary
         is assumed.</preamble>
         <artwork align="left">POST /Events  HTTP/1.1
Host: notify.exampleidp.com
Authorization: Bearer h480djs93hd8
Accept: application/sstp+json

{}</artwork>
         </figure> 
         
         <t>In response to the above two requests, the SSTP 
         server responds immediately if 
         <spanx style="verb">respondImmediately</spanx> is true or
         SETs are available. If no SETs are available at the 
         time of the request and <spanx style="verb">respondImmediately</spanx>
         is false, the SSTP server delays response until a SET is 
         available.</t>
         
         <t>As described in <xref target="pollReqAttrs"/> a JSON 
         document is returned containing the JSON attribute 
         <spanx style="verb">sets</spanx>.</t>
         
         <figure anchor="pollResponse" title="Example Pull Response">
         <preamble>The following is an example response to
         the requests shown <xref target="pollInitRequest"/> and
         <xref target="pollDefaultRequest"/>. This example
         shows two SETs are returned.</preamble>
         <artwork align="left">HTTP/1.1 200 OK
Content-Type: application/sstp+json
Location: https://notify.exampleidp/Events

{
"sets":{
  "4d3559ec67504aaba65d40b0363faad8":
   "eyJhbGciOiJub25lIn0.
   eyJqdGkiOiI0ZDM1NTllYzY3NTA0YWFiYTY1ZDQwYjAzNjNmYWFkOCIsImlhdCI6MTQ
   1ODQ5NjQwNCwiaXNzIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tIiwiYXVkIjpbIm
   h0dHBzOi8vc2NpbS5leGFtcGxlLmNvbS9GZWVkcy85OGQ1MjQ2MWZhNWJiYzg3OTU5M
   2I3NzU0IiwiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tL0ZlZWRzLzVkNzYwNDUxNmIx
   ZDA4NjQxZDc2NzZlZTciXSwiZXZlbnRzIjp7InVybjppZXRmOnBhcmFtczpzY2ltOmV
   2ZW50OmNyZWF0ZSI6eyJyZWYiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcn
   MvNDRmNjE0MmRmOTZiZDZhYjYxZTc1MjFkOSIsImF0dHJpYnV0ZXMiOlsiaWQiLCJuY
   W1lIiwidXNlck5hbWUiLCJwYXNzd29yZCIsImVtYWlscyJdfX19.",
  "3d0c3cf797584bd193bd0fb1bd4e7d30":
   "eyJhbGciOiJub25lIn0.
   eyJqdGkiOiIzZDBjM2NmNzk3NTg0YmQxOTNiZDBmYjFiZDRlN2QzMCIsImlhdCI6MTQ
   1ODQ5NjAyNSwiaXNzIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tIiwiYXVkIjpbIm
   h0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZWVkcy85OGQ1MjQ2MWZhNWJiYzg3OTU5M
   2I3NzU0IiwiaHR0cHM6Ly9qaHViLmV4YW1wbGUuY29tL0ZlZWRzLzVkNzYwNDUxNmIx
   ZDA4NjQxZDc2NzZlZTciXSwic3ViIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tL1V
   zZXJzLzQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJldmVudHMiOnsidXJuOmlldG
   Y6cGFyYW1zOnNjaW06ZXZlbnQ6cGFzc3dvcmRSZXNldCI6eyJpZCI6IjQ0ZjYxNDJkZ
   jk2YmQ2YWI2MWU3NTIxZDkifSwiaHR0cHM6Ly9leGFtcGxlLmNvbS9zY2ltL2V2ZW50
   L3Bhc3N3b3JkUmVzZXRFeHQiOnsicmVzZXRBdHRlbXB0cyI6NX19fQ."
 }
}</artwork></figure>
       <t>In the above example, two SETs whose <spanx style="verb">jti</spanx>
       are <spanx style="verb">4d3559ec67504aaba65d40b0363faad8</spanx> 
       and <spanx style="verb">3d0c3cf797584bd193bd0fb1bd4e7d30</spanx> 
       are delivered.</t>
       
       <figure anchor="emptyPollResponse" title="Example No SETs Pull Response">
       <preamble>The following is an example response to
       the request shown <xref target="pollInitRequest"/> where
       <spanx style="verb">returnImmediately</spanx> was set 
       showing no new SETs are available.</preamble>
       <artwork align="left">HTTP/1.1 200 OK
Content-Type: application/sstp+json
Location: https://notify.exampleidp/Events

{
 "sets":{ }
}</artwork></figure>
       
       <section title="Acknowledge Only Request">
       
         <t>This variation is typically used when a client needs to 
         acknowledge received SETs on a separate thread
         from one receiving SETs.</t>
         
         <t>An SSTP client acknowledges previously received SETs 
         but indicates it does not want to receive SETs in the 
         current request/response by setting the
         <spanx style="verb">returnEvents</spanx> 
         attribute to <spanx style="verb">false</spanx>.</t>
        
         <figure anchor="pollAckOnly" title="Example Acknowledge Only Request">
         <preamble>The following example is an 
         acknowledgement of SETs previously received (e.g. from 
         the response shown in <xref target="pollResponse"/>).</preamble>
         <artwork>POST /Events  HTTP/1.1
Host: notify.exampleidp.com
Authorization: Bearer h480djs93hd8
Content-Type: application/sstp+json
Authorization: Bearer h480djs93hd8

{
  "ack":[
    "4d3559ec67504aaba65d40b0363faad8",
    "3d0c3cf797584bd193bd0fb1bd4e7d30"
  ],
  "returnEvents":false
}</artwork>
         </figure>
       
       </section>
       
       <section anchor="pollAck" title="Poll with Acknowledgement">
       
         <t>This variation allows a client to simultaneously 
         acknowledge previously received SETs and wait for the next
         group of SETs in a single HTTP request.</t>
       
         <figure anchor="pollGoodResponse" 
         title="Example Pull With Acknowledgement and No Errors">
         <preamble>The following SSTP request 
         contains an acknowledgement of SETs received from 
         <xref target="pollResponse"/>.</preamble>
         <artwork>POST /Events  HTTP/1.1

Host: notify.exampleidp.com
Authorization: Bearer h480djs93hd8
Content-Type: application/sstp+json
Accept: application/sstp+json
Authorization: Bearer h480djs93hd8

{
  "ack":[
    "4d3559ec67504aaba65d40b0363faad8",
    "3d0c3cf797584bd193bd0fb1bd4e7d30"
  ],
  "returnImmediately":false
}</artwork>
          </figure>
             
       </section>
       
       <section anchor="pollAckErr" title="Pull with Acknowledgement and Errors">
         <t>In the case where errors are detected in previously 
         received SETs, the client (or server) uses the 
         <spanx style="verb">setErrs</spanx> attribute to indicate errors
         in its request.
         </t>
        
         <figure anchor="pollErrorResponse" 
           title="Example Pull Acknowledgement With Error">
         <preamble>The following is an example of an SSTP response
         acknowledges 1 error and 1 receipt of two SETs received 
         in <xref target="pollResponse"/>.</preamble>
         <artwork>POST /Events  HTTP/1.1

Host: notify.exampleidp.com
Authorization: Bearer h480djs93hd8
Content-Type: application/sstp+json
Accept: application/sstp+json
Authorization: Bearer h480djs93hd8

{
  "ack":["3d0c3cf797584bd193bd0fb1bd4e7d30"],
  "setErrs":{
    "4d3559ec67504aaba65d40b0363faad8":{
      "err":"jwtAud",
      "description":"The audience value was incorrect."
    }
  }
}</artwork>
         </figure>     
       </section>
       
       </section>
       
       <section anchor="examplePushPull" title="Example Push-Pull Bi-directional Transfer">
       
       <t>In push-pull mode, JSON attributes <spanx style="verb">sets</spanx>,
       <spanx style="verb">ack</spanx> and <spanx style="verb">setErrs</spanx>
       are used in both HTTP request and response messages between
       client and SSTP server.</t>
       
       <figure anchor="pushPullRequest" title="Example Push-Pull Request">
       <preamble>In the following example, two SETs are transferred
       to the SSTP server and events are requested in return.</preamble>
       <artwork>POST /Events  HTTP/1.1
Host: notify.exampleidp.com
Authorization: Bearer h480djs93hd8
Content-Type: application/sstp+json
Accept: application/sstp+json
{
"returnEvents":true, 
"ack":["b453bf9972b84e0492d5c7f55f68fb6a"],   
"sets":{
  "4d3559ec67504aaba65d40b0363faad8":
   "eyJhbGciOiJub25lIn0.
   eyJqdGkiOiI0ZDM1NTllYzY3NTA0YWFiYTY1ZDQwYjAzNjNmYWFkOCIsImlhdCI6MTQ
   1ODQ5NjQwNCwiaXNzIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tIiwiYXVkIjpbIm
   h0dHBzOi8vc2NpbS5leGFtcGxlLmNvbS9GZWVkcy85OGQ1MjQ2MWZhNWJiYzg3OTU5M
   2I3NzU0IiwiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tL0ZlZWRzLzVkNzYwNDUxNmIx
   ZDA4NjQxZDc2NzZlZTciXSwiZXZlbnRzIjp7InVybjppZXRmOnBhcmFtczpzY2ltOmV
   2ZW50OmNyZWF0ZSI6eyJyZWYiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcn
   MvNDRmNjE0MmRmOTZiZDZhYjYxZTc1MjFkOSIsImF0dHJpYnV0ZXMiOlsiaWQiLCJuY
   W1lIiwidXNlck5hbWUiLCJwYXNzd29yZCIsImVtYWlscyJdfX19.",
  "3d0c3cf797584bd193bd0fb1bd4e7d30":
   "eyJhbGciOiJub25lIn0.
   eyJqdGkiOiIzZDBjM2NmNzk3NTg0YmQxOTNiZDBmYjFiZDRlN2QzMCIsImlhdCI6MTQ
   1ODQ5NjAyNSwiaXNzIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tIiwiYXVkIjpbIm
   h0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZWVkcy85OGQ1MjQ2MWZhNWJiYzg3OTU5M
   2I3NzU0IiwiaHR0cHM6Ly9qaHViLmV4YW1wbGUuY29tL0ZlZWRzLzVkNzYwNDUxNmIx
   ZDA4NjQxZDc2NzZlZTciXSwic3ViIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tL1V
   zZXJzLzQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJldmVudHMiOnsidXJuOmlldG
   Y6cGFyYW1zOnNjaW06ZXZlbnQ6cGFzc3dvcmRSZXNldCI6eyJpZCI6IjQ0ZjYxNDJkZ
   jk2YmQ2YWI2MWU3NTIxZDkifSwiaHR0cHM6Ly9leGFtcGxlLmNvbS9zY2ltL2V2ZW50
   L3Bhc3N3b3JkUmVzZXRFeHQiOnsicmVzZXRBdHRlbXB0cyI6NX19fQ."
 }
}</artwork></figure>

         <figure anchor="pushPullResponse" title="Example Push-Pull Response">
         <preamble>The following is an example response to
         the request shown <xref target="pushPullRequest"/>.</preamble>
         <artwork align="left">HTTP/1.1 200 OK
Content-Type: application/sstp+json
Location: https://notify.exampleidp/Events

{
"ack":[
  "4d3559ec67504aaba65d40b0363faad8",
  "3d0c3cf797584bd193bd0fb1bd4e7d30"
],
"sets":{
  "6f332aefc730400a9f645d36a12ba4ab":
   "eyJhbGciOiJub25lIn0.
   eyJqdGkiOiI0ZDM1NTllYzY3NTA0YWFiYTY1ZDQwYjAzNjNmYWFkOCIsImlhdCI6MTQ
   1ODQ5NjQwNCwiaXNzIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tIiwiYXVkIjpbIm
   h0dHBzOi8vc2NpbS5leGFtcGxlLmNvbS9GZWVkcy85OGQ1MjQ2MWZhNWJiYzg3OTU5M
   2I3NzU0IiwiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tL0ZlZWRzLzVkNzYwNDUxNmIx
   ZDA4NjQxZDc2NzZlZTciXSwiZXZlbnRzIjp7InVybjppZXRmOnBhcmFtczpzY2ltOmV
   2ZW50OmNyZWF0ZSI6eyJyZWYiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcn
   MvNDRmNjE0MmRmOTZiZDZhYjYxZTc1MjFkOSIsImF0dHJpYnV0ZXMiOlsiaWQiLCJuY
   W1lIiwidXNlck5hbWUiLCJwYXNzd29yZCIsImVtYWlscyJdfX19."
 }
}</artwork></figure>

         <t>Following the response from the SSTP server, the client
         would subsequently repeats the request-response cycle by  
         acknowledging the SET identified by a <spanx style="verb">jti</spanx>
         value of <spanx style="verb">6f332aefc730400a9f645d36a12ba4ab</spanx>.</t>
       </section>
     </section>
     
     <section anchor="errorResponse" title="Error Response Handling">
        <t></t>
        <t>If a SET is invalid, the following error codes are defined:</t>
        <texttable anchor="reqErrors" title="SET Errors">
          <ttcol>Err Value</ttcol><ttcol>Description</ttcol>
          <c>json</c><c>Invalid JSON object.</c>
          <c>jwtParse</c><c>Invalid or unparsable JWT or JSON structure.</c>
          <c>jwtHdr</c><c>In invalid JWT header was detected.</c>
          <c>jwtCrypto</c><c>Unable to parse due to unsupported algorithm.</c>
          <c>jws</c><c>Signature was not validated.</c>
          <c>jwe</c><c>Unable to decrypt JWE encoded data.</c>
          <c>jwtAud</c><c>Invalid audience value.</c>
          <c>jwtIss</c><c>Issuer not recognized.</c>
          <c>setType</c><c>An unexpected Event type was received.</c>
          <c>setParse</c><c>Invalid structure was encountered such as an 
          inability to parse or an incomplete set of event claims.</c>
          <c>setData</c><c>SET event claims incomplete or invalid.</c>
          <c>directional</c><c>The SSTP does not support transfer of 
          SETs in the requested direction.</c>
        </texttable>
            
        <t>An error response has a <spanx style="verb">Content-Type</spanx>
        of <spanx style="verb">application/sstp+json</spanx> which
        is a JSON document that provides details about the error. The JSON document
        includes the JSON attributes: <list style="hanging">
          <t hangText="err"><vspace />A value which is a keyword that 
          describes the error (see <xref target="reqErrors" />).</t>
          <t hangText="description"><vspace />A human-readable text that provides
          additional diagnostic information.</t>
        </list>
        When included as part of an HTTP Status 400 response, the above
        JSON is the HTTP response body in the JSON attribute 
        <spanx style="verb">setErrs</spanx> (see <xref target="pollReqAttrs"/>). 
        </t>
         
        </section>  
       
   </section>
   
   <section anchor="aa" title="Authentication and Authorization" toc="default">
      <t>The SET delivery methods described in this specification are
      based upon HTTP and depend on the use of TLS and/or standard 
      HTTP authentication and authorization schemes as per 
      <xref target="RFC7235" />. For example, the following
      methodologies could be used among others: <list style="hanging">
          <t hangText="TLS Client Authentication"><vspace />SSTP
          server MAY negotiate TLS mutual client authentication. 
          See <xref target="RFC5246">Section 7.3</xref>. </t>

          <t hangText="Bearer Tokens"><vspace />Bearer tokens 
          <xref target="RFC6750" /> MAY be used when combined with TLS and a token
          framework such as OAuth 2.0 <xref target="RFC6749" />. 
          For security considerations regarding the use of bearer tokens in
          SET delivery see <xref target="bearerConsiderations" />.</t>

          <t hangText="Basic Authentication"><vspace />Usage of basic
          authentication should be avoided due to its use of a single factor
          that is based upon a relatively static, symmetric secret.
          Implementers SHOULD combine the use of basic authentication with
          other factors. The security considerations of HTTP BASIC, are well
          documented in <xref target="RFC7617" /> and SHOULD be considered
          along with using signed SETs (see SET Payload Authentication below).</t>
          
          <t hangText="SET Payload Authentication"><vspace/>In scenarios 
          where SETs are signed and
          the delivery method is HTTP POST,
          SSTP clients MAY elect to use Basic Authentication or not 
          to use HTTP or TLS based authentication at all. See 
          <xref target="payloadAuthentication" /> for considerations.</t>
        </list></t>

      <t>As per <xref target="RFC7235">Section 4.1 of</xref>, a SET
      delivery endpoint SHALL indicate supported HTTP authentication 
      schemes via the <spanx style="verb">WWW-Authenticate</spanx> header.</t>

      <t>Because SET Delivery describes a simple function, authorization
      for the ability to pick-up or deliver SETs can be derived by
      considering the identity of the SET issuer, or via an authentication
      method above. This specification considers authentication as a
      feature to prevent denial-of-service attacks. Because SETs are
      not commands (see ), event receivers are free to ignore SETs that 
      are not of interest.</t>

      <t>For illustrative purposes only, SET delivery examples show an OAuth2
      bearer token value <xref target="RFC6750" /> in the authorization header.
      This is not intended to imply that bearer tokens are
      preferred. However, the use of bearer tokens in the specification does
      reflect common practice. </t>

      <section anchor="authzTokens" title="Use of Tokens as Authorizations">
        <t>When using bearer tokens or proof-of-possession tokens that
        represent an authorization grant such as issued by OAuth (see <xref target="RFC6749" />), implementers SHOULD consider the type of
        authorization granted, any authorized scopes (see Section 3.3 of <xref target="RFC6749" />), and the security subject(s) that SHOULD be mapped
        from the authorization when considering local access control rules.
        Section 6 of the OAuth Assertions draft <xref target="RFC7521" />, documents common scenarios for
        authorization including:<list style="symbols">
            <t>Clients using an assertion to authenticate and/or act on behalf
            of itself;</t>

            <t>Clients acting on behalf of a user; and,</t>

            <t>A Client acting on behalf of an anonymous user (e.g., see next
            section).</t>
          </list>When using OAuth authorization tokens, implementers MUST take
        into account the threats and countermeasures documented in the
        security considerations for the use of client authorizations (see
        Section 8 of <xref target="RFC7521" />). When using
        other token formats or frameworks, implementers MUST take into account
        similar threats and countermeasures, especially those documented by
        the relevant specifications.</t>
      </section>
  
  </section>
  <section anchor="Security" title="Security Considerations" toc="default">
      
      <section anchor="payloadAuthentication" title="Authentication Using Signed SETs">
      <t>In scenarios where HTTP authorization or TLS mutual authentication
      are not used or are considered weak, JWS signed SETs SHOULD be 
      used (see <xref target="RFC7515"/> and <xref target="I-D.ietf-secevent-token">
      Security Considerations</xref>). This enables event receivers
      to validate that the SET issuer is authorized to deliver SETs.
      </t>
      </section>
      <section title="HTTP Considerations">
        <t>SET delivery depends on the use of Hypertext Transfer Protocol and thus
        subject to the security considerations of HTTP <xref
        target="RFC7230">Section 9</xref> and its related specifications.</t>

        <t>As stated in <xref target="RFC7230">Section 2.7.1</xref>, an 
        HTTP requestor MUST NOT generate the <spanx style="verb">userinfo</spanx>
        (i.e., username and password) component (and its "@" delimiter) when
        an "http" URI reference is generated with a message as they are now
        disallowed in HTTP.</t>
      </section>

      <section title="TLS Support Considerations">
        <t>SETs contain sensitive information that is considered PII
        (e.g. subject claims). Therefore, event issuers and
        receivers MUST require the use of a transport-layer 
        security mechanism. Event delivery endpoints MUST support TLS 
        1.2 <xref target="RFC5246"/> and MAY support additional 
        transport-layer mechanisms meeting its security requirements. 
        When using TLS, the client MUST perform a TLS/SSL server
        certificate check, per <xref target="RFC6125"/>. Implementation
        security considerations for TLS can be found in "Recommendations for
        Secure Use of TLS and DTLS" <xref target="RFC7525"/>.</t>
      </section>

      <section title="Authorization Token Considerations">
        <t>When using authorization tokens such as those issued by OAuth 2.0
        <xref target="RFC6749"/>, implementers MUST take into account threats
        and countermeasures documented in Section 8 of <xref
        target="RFC7521"/>.</t>
        
        <section anchor="bearerConsiderations"
               title="Bearer Token Considerations">
        <t>Due to the possibility of interception, Bearer tokens MUST be 
        exchanged using TLS.</t>

        <t>Bearer tokens MUST have a limited lifetime that can be determined
        directly or indirectly (e.g., by checking with a validation service)
        by the service provider. By expiring tokens, clients are forced to
        obtain a new token (which usually involves re-authentication) for
        continued authorized access. For example, in OAuth2, a client MAY use
        OAuth token refresh to obtain a new bearer token after authenticating
        to an authorization server. See Section 6 of <xref
        target="RFC6749"/>.</t>

        <t>Implementations supporting OAuth bearer tokens need to factor in
        security considerations of this authorization method <xref
        target="RFC7521"/>. Since security is only as good
        as the weakest link, implementers also need to consider authentication
        choices coupled with OAuth bearer tokens. The security considerations
        of the default authentication method for OAuth bearer tokens, HTTP
        BASIC, are well documented in <xref
        target="RFC7617"/>, therefore implementers
        are encouraged to prefer stronger authentication methods. Designating
        the specific methods of authentication and authorization are
        out-of-scope for the delivery of SET tokens, however this 
        information is provided as a resource to implementers.</t>
      </section>
      </section>

      
   </section>
   
   <section title="Privacy Considerations">
   
      <t>If a SET needs to be retained for audit purposes, JWS MAY 
      be used to provide verification of its authenticity.</t>
      
      <t>Event transmitters SHOULD attempt to filter SETs issued 
      so that the content is targeted to the specific business and 
      protocol needs of receivers.</t>
      
      <t>When sharing personally identifiable information or information
      that is otherwise considered confidential to affected users, event 
      transmitters and receivers MUST have the appropriate legal agreements
      and user consent or terms of service in place.</t>
      
      <t>The propagation of subject identifiers can be perceived as personally
      identifiable information. Where possible, event transmitters and receivers
      SHOULD devise approaches that prevent propagation -- for example, the
      passing of a hash value that requires the subscriber to already know
      the subject.</t>

   </section>

    <section anchor="IANA" title="IANA Considerations">
      
      <t>There are no IANA considerations.</t>
  
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml' ?><!-- TLS 1.2 -->

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5988.xml' ?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6125.xml' ?><!-- TLS Certs -->
      
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7159.xml' ?><!-- JSON -->
      
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7231.xml' ?><!-- HTTP Semantics -->
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7519.xml' ?><!-- JWT -->

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7525.xml' ?><!-- TLS Recos -->

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.8174.xml' ?>
   
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-secevent-token-07.xml'?>

    </references>

    <references title="Informative References">
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3339.xml' ?>
    
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6202.xml' ?><!-- HTTP Long Polling -->
    
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6749.xml' ?><!-- OAuth -->
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6750.xml' ?><!-- OAuth Bearer-->
      
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7515.xml' ?><!-- JWS -->
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7516.xml' ?><!-- JWE -->
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7521.xml' ?><!-- Client Auth Assertions -->
      
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7230.xml' ?><!-- HTTP Msg -->
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7235.xml' ?><!-- HTTP Auth -->

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7617.xml' ?><!-- Basic Auth Update -->
      
     <reference anchor="POSIX.1">
  <front>
    <title>The Open Group Base Specifications Issue 7</title>
    <author>
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2013"/>
  </front>
  <seriesInfo value="Std 1003.1, 2013 Edition" name="IEEE"/>
  <format target="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_15"
    type="HTML" />
      </reference>

      <reference anchor="openid-connect-core">
        <front>
          <title>OpenID Connect Core 1.0</title>
          <author fullname="Nat Sakimura et al"><organization>NRI</organization></author>
          <date day="8" month="Nov" year="2014"/>
        </front>
        <format type="HTML" target="http://openid.net/specs/openid-connect-core-1_0.html"/>
      </reference>
      <reference anchor="saml-core-2.0">
        <front>
          <title>Assertions and Protocols for the OASIS Security Assertion Markup Language (SAML) V2.0</title>
          <author fullname="Scott Cantor et al"><organization>Internet2</organization></author>
          <date day="15" month="March" year="2005"/>
        </front>
        <format type="PDF" target="http://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf"/>
      </reference>

    </references>

    <section title="Acknowledgments">
      
      
      <t>The editor would like to thank the participants in the the SECEVENTS
      working group for their support of this specification.</t>
      
      <t>This specification is based on and optionally replaces draft-ietf-secevent-delivery.</t>
    </section>

    <section title="Change Log">
      <t>Draft 00 - PH - Original</t>
      
    </section>
  </back>
</rfc>
