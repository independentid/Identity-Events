<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-hunt-secevent-delivery-00"
	ipr="trust200902">
	<front>
		<title abbrev="draft-hunt-secevent-distribution">
			SET Token Delivery Using HTTP</title>

		<author fullname="Phil Hunt" initials="P." role="editor"
			surname="Hunt">
			<organization abbrev="Oracle">Oracle Corporation</organization>

			<address>
				<email>phil.hunt@yahoo.com</email>
			</address>
		</author>
    
    <author fullname="Marius Scurtescu" initials="M.S." surname="Scurtescu">
      <organization abbrev="Google">Google</organization>

      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>

		<date year="2017" />

		<keyword>Internet-Draft</keyword>

		<abstract>
			<t>
				This specification defines how a series of security event tokens 
        (SETs) may be delivered to a previously registered receiver 
        using HTTP GET or POST over TLS. The specification also defines how delivery 
        can be assured subject to the SET Token Receiver's need for assurance.
        </t>
		</abstract>
	</front>

	<middle>
		<section anchor="intro" title="Introduction and Overview" toc="default">
			
      <t>
        This specification defines how a stream of SETs (see <xref target="I-D.ietf-secevent-token"/>)
        can be transmitted to a previously registered 
        Event Receiver using HTTP <xref target="RFC7231"/>
        over TLS. The specification defines a method to push SETs via 
        HTTP POST and to poll for SETs using HTTP GET. 
      			</t>

      <t>This specification defines to methods of SET delivery in what
      is known as Event Streams. The specification includes a 
      verification process which tests and validates Event Stream 
      configuration.</t>
        
      <t>This specification does not define the method by which Event 
      Streams are defined, provisioned, managed, monitored,
      and configured and is out of scope of this specification.
      <vspace/>[[This work is TBD by the SECEVENTS WG]]</t>
      
      

			<section anchor="notat" title="Notational Conventions" toc="default">
				<t>
					The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
					"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in
					this
					document are to be interpreted as described in
					<xref target="RFC2119" />
					. These keywords are capitalized when used to
					unambiguously specify requirements of the protocol or application
					features and behavior that affect the inter-operability and security of
					implementations. When these words are not capitalized, they are
					meant
					in their natural-language sense.
				</t>

				<t>
					For purposes of readability examples are not URL encoded.
					Implementers MUST percent encode URLs as described in
					<xref target="RFC3986">Section 2.1 of</xref>
					.
				</t>

				<t>Throughout this documents all figures MAY contain spaces and
					extra
					line-wrapping for readability and space limitations. Similarly, some
					URI's contained within examples, have been shortened for space and
					readability reasons.
				</t>
			</section>

			<section anchor="defs" title="Definitions" toc="default">
        <t>This specification assumes terminology defined in the Security
        Event Token specification<xref target="I-D.ietf-secevent-token"/>
        .</t>
				<t>
					The following definitions are defined for Security Event distribution:
					<list style="hanging">
          
            <t hangText="Identity Provider"><vspace/>
              An Identity Provider is a service provider that issues authentication
              assertions that may be used by Relying Party service providers
              to establish login sessions with users. Examples of Identity 
              Providers are defined in: OpenID Connect 
              <xref target="openid-connect-core"/> and SAML2 
              <xref target="saml-core-2.0"/>. For the purpose of this 
              specification an Identity Provider also includes any provider
              of services where the compromise of an account may open up 
              relying parties to attack. For example for the purposes of
              security events, an email service provider could be 
              considered an "implicit" Identity Provider.
            </t>
              
            <t hangText="Relying Party"><vspace/>
              A Relying Party is a service provider that accepts assertions 
              from Identity Providers to establish sessions. Examples of 
              Relying Parties are defined in: OpenID Connect 
              <xref target="openid-connect-core"/> and SAML2 
              <xref target="saml-core-2.0"/>
            </t>          
            
            <t hangText="Event Transmitter"><vspace/>
              A service provider that delivers SETs to other providers known
              as Event Receivers. Some examples of Event Transmitters are 
              Identity Providers and Relying Parties. An Event Transmitter
              is responsible for offering a service that allows the Event
              Receiver to check the Event Stream configuration and status
              known as the "Control Plane". 
            </t>
            
            <t hangText="Event Receiver"><vspace/>
              A service provider that registers to receive SETs from 
              an Event Transmitter and provides an endpoint to receive
              SETs via HTTP POST (known as the "Data Plane"). 
              Some examples of Event Receivers are 
              Identity Providers and Relying Parties. Event Receivers
              can check current Event Stream configuration and status by
              accessing the Event Transmitters "Control Plane".
            </t>
  
            <t hangText="Event Stream"><vspace/>
              An Event Stream is a defined location, distribution method
              and whereby an Event Transmitter and Event Receiver 
              exchange a pre-defined family of SETs. 
            </t>
                          
						<t hangText="Event Family"><vspace/>An Event Family is a 
              URI that describes the set of events types be issued in 
              an Event Stream.
						</t>
            
            <t hangText="Subject"><vspace/>
              The security subject around which a security event has 
              occurred. For example, a security subject might per a user, 
              a person, an email address, a service provider entity, an
              IP address, an OAuth Client, a mobile device, or any identifiable
              thing referenced in security and authorization systems.
            </t>
            
            <t hangText="Event"><vspace/>An event is defined to be an 
            event as represented by a security event token (SET).
            See <xref target="I-D.ietf-secevent-token"/>.</t>

            <t hangText="NumericDate"><vspace/>
            A JSON numeric value representing the number of seconds from
            1970-01-01T00:00:00Z UTC until the specified UTC date/time,
            ignoring leap seconds.  This is equivalent to the 
            IEEE Std 1003.1, 2013 Edition <xref target="POSIX.1"/> 
            definition "Seconds Since the Epoch", in which each day is 
            accounted for by exactly 86400 seconds, other than that 
            non-integer values can be represented.  See 
            <xref target="RFC3339"/> for details regarding date/times 
            in general and UTC in particular.</t>

      
					</list>
				</t>
			</section>
		</section>
   
  <section title="SET Delivery Data Plane">
    <t>The data plane represents the communication channel over which a 
    series of SETs are delivered to a configured Event Receiver otherwise
    known as an Event Stream.</t>
    <section anchor="process" title="Event Delivery Process">
			<t>When an Event occurs, the Feed Provider constructs a SET
      token <xref target="I-D.ietf-secevent-token" /> that describes the	
      event. The SET issuer determines the Event Streams over which the
      SET should be distributed to.</t>
      <t> 
      How SET Events are defined and the process by which events are identified for 
      Event Receivers is out-of-scope of this	specification.
			</t>

			<t>
			When a SET is available for a Event Receiver, the Feed Transmitter
			attempts to deliver the SET based on the Event Receiver's registered
			delivery mechanism:
			<list style="symbols">
				<t>The Event Transmitter uses an HTTP/1.1 POST to the Event 
        Receiver endpoint to deliver the SET;
			  </t>
        <t>The Event Transmitter queues up the SET in a buffer so that
        an Event Receiver MAY poll for SETs using HTTP/1.1 GET.</t>

			  <t>Or, the Feed Transmitter delivers the event through a different
        method not defined by this specification.
			  </t>
			</list>
			</t>
      
      <t>Delivery of SETs MAY be delivered using one of two content formats:
      <list style="hanging">
        <t hangText="Single Event(application/jwt)"><vspace/>Where SETs are delivered
        one at a time (e.g. such as typical with HTTP POST) where the
        data payload is just a JSON Web Token <xref target="RFC7519"/> 
        (see xxxxxxx).</t>
        
        <t hangText="Multi-Event(application/secevents+json)">Where 
        multiple SETs are delivered in a JSON structure (see xxxxxxxx). 
        The use of Multi-Event format is typically used with delivery 
        methods that poll based on a timeout or schedule (e.g. HTTP GET).</t>
      </list></t>

			<t>After successful delivery of SETs, Feed Transmitters SHOULD NOT be 
      required to maintain or record SETs for recovery. Once a SET is 
      delivered, the Event Receiver SHALL be responsible for retention
      and recovery.</t>
      
      <t>Transmitted SETs SHOULD be self-validating (e.g. signed)
      in order to verify they were issued by the Event Transmitter at a
      later date when de-coupled from the original delivery via HTTP
      where authenticity could be checked via the HTTP or 
      TLS mutual authentication.
			</t>

			<t>
			If delivery to any particular Event Receiver has been delayed for
			an extended period of time, the Feed Transmitter MAY suspend the
      affected Event Stream and even stop maintaining outstanding SETs for
			the Event Receiver at its discretion and available resources. The
      method by which the Event Receiver discovers and recovers these 
      SETs is out of scope of this specification.
			</t>

			<t>
			Upon receiving a SET, the Event Receiver reads the SET and validates 
      it. The receiver MUST then inform the Event transmitter, using the 
      defined method of any authentication, configuration, parsing or JWT
      validation errors that occur.</t>
      
      <t>
      Based upon the content of the token, the Event Receiver decides what, 
      if any, action needs to be taken in response to the received SET. For 
      example, in response to a SCIM provisioning event <xref target="idevent-scim" /> 
      indicating a changed resource, the Event Receiver might perform a 
      SCIM GET request (see <xref target="RFC7644">Section 3.4</xref>)
			to the affected resource URI in order to confidentially obtain 
      the current state of the transmitter's affected SCIM resource in 
      order to reconcile local corresponding state changes. 
      </t>
        
      <t>
      The action a Event Receiver takes in response to a SET MAY be 
      substantially different than merely copying the action of the 
      SET issuer. 
      A single SET can trigger one or more receiver actions or
      it can be ignored. For example, upon receiving 
      notification that a user resource has been added to a group, the 
      Event Receiver may first determine that the user does not exist in the 
      Event Receiver's domain. The Event Receiver translates the event into two 
      actions:<list style="numbers">
        <t>Retrieve the user (e.g. using SCIM GET) and then provisions 
        the user locally. After enabling the user,</t>
        <t>The Event Receiver then enables the user for the application 
        associated with membership in the issuer's group.</t>
        </list>  
			</t>    
      
      <t>The Event Receiver SHALL NOT use the Event acknowledgement mechanism
      to report Event errors other than related to the validation and 
      parsing of the SET token itself.</t>
  </section>
  
  <section anchor="httpPost" title="HTTP POST Delivery">
        
     <t>This method allows an Event Transmitter to use HTTP POST 
     (<xref target="RFC7231">Section 4.3.3</xref>) to deliver
     SETs to the registered web callback URI identified in the Event
     Stream configuration. </t>
          
     <t>The SET to be delivered MAY be signed 
     and/or encrypted as defined in <xref target="I-D.ietf-secevent-token" />.</t>
           
     <t>The Event Stream configuration defines a URI the of an Event 
     Receiver provided endpoint which accepts HTTP POST requests (e.g. 
     <spanx style="verb">https://notify.examplerp.com/Events</spanx>).</t>

     <t>The HTTP Content-Type (see 
     <xref target="RFC7231">Section 3.1.1.5</xref>) for the HTTP POST is 
     <spanx style="verb">application/jwt</spanx> and SHALL consist of 
     a single SET token (see <xref target="I-D.ietf-secevent-token" />).
     As per <xref target="RFC7231">Section 5.3.2</xref>, the expected 
     media type (<spanx style="verb">Accept</spanx> header) response is 
     <spanx style="verb">application/json</spanx>.</t>
     
     <figure align="left" anchor="postSet" title="Example HTTP POST Request">
     <preamble>To deliver an event, the Event Transmitter generates an event 
     delivery message and uses HTTP POST to the configured endpoint with
     the appropriate <spanx style="verb">Accept</spanx> and 
     <spanx style="verb">Content-Type</spanx> headers.</preamble>
<artwork align="left">POST /Events  HTTP/1.1

Host: notify.examplerp.com
Accept: application/json
Content-Type: application/jwt
"eyJhbGciOiJub25lIn0
.
eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
.</artwork>
     </figure>
            
     <t>Upon receipt of the request, the Event Receiver SHALL 
     validate the JWT structure of the SET as defined in 
     <xref target="RFC7519">Section 7.2</xref>. The Event Receiver 
     SHALL also validate the SET information as described
     in <xref target="I-D.ietf-secevent-token">Section 2</xref>.</t>
     <t>If the SET is determined to be valid, the Event Receiver SHALL
     indicate successful submission by responding with HTTP Status
     202 as <spanx style="verb">Accepted</spanx> 
     (see <xref target="RFC7231">Section 6.3.3</xref>).</t>
     
     <figure anchor="goodPostResponse" title="Example Successful Delivery Response">
        <preamble>The following is a non-normative example of a successful
        receipt of a SET.</preamble>
        <artwork>HTTP/1.1 202 Accepted</artwork>
     </figure> 
          
     <t>In the event of a general HTTP error condition, the Event Receiver
     MAY respond with an appropriate HTTP Status code as defined in 
     <xref target="RFC7231">Section 6</xref>.</t>
     <t>When the Event Receiver detects an error parsing and 
     validating a received SET, the Event Receiver SHALL indicate an 
     HTTP Status 400 error with an error code as described in <xref target="errorResponse"/>.
     </t>
     
     <figure anchor="badPostResponse" title="Example HTTP Status 400 Response">
        <preamble>The following is an example non-normative Bad
        Request error.</preamble>
        <artwork>HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "err":"dup",
  "description":"SET already received. Ignored."

}</artwork>
     </figure>    
     </section>
     
     <section anchor="httpGet" title="Delivery using HTTP Polling">
     
       <t>This method allows an Event Receiver to use HTTP GET 
       (<xref target="RFC7231">Section 4.3.1</xref>) to check
       for and receive zero or more SETs at a periodic interval. To 
       acknowledge receipt of provided SETs, the Event Receiver 
       performs an HTTP POST to acknowledge successful transfer of SETs 
       and/or to indicate appropriate errors as specified in 
       <xref target="pollGetAck"/>.
       </t>
       
       <t>This SET delivery method is primarily provided to support 
       Event Receivers located behind firewalls and are not 
       able to open HTTP endpoints to receive HTTP POST requests. For 
       the purposes of this delivery method, it is assumed there is a 
       single Event Receiver entity performing event polling. 
       Considerations for multi-threaded polling are out of scope of 
       this SET delivery method.
       </t>
            
       <t>SETs to be delivered MAY be signed 
       and/or encrypted as defined in <xref target="I-D.ietf-secevent-token" />.</t>
       
       <t>The delivery of SETs in this method is facilitated by a 
       two-step method initiated by Event Receivers:<list style="numbers">
        <t>The Event Receiver polls for available SETs using an 
        HTTP GET to a pre-arranged endpoint provided by the Event 
        Transmitter.</t>
        <t>If any SETs are received in step 1, the Event Receiver 
        acknowledges the SETs, using an HTTP POST to the same endpoint 
        used to previously poll for SETs.</t>
       </list></t>
 
       <section anchor="pollGET" title="Step 1: Polling for SETs">
       
       <t>The Event Receiver performs an HTTP GET to a pre-arranged 
       polling endpoint URI to check for any new or unacknowledged SETs
       that are available.</t>
       
       <t>The following polling parameters are supported:<list style="hanging">
         <t hangText="maxEvents"><vspace/>an integer value indicating the 
         maximum number of unacknowledged SETs that SHOULD be returned.
         If more than the maximum number of SETs are available, the 
         oldest SETs available SHOULD be returned first.</t>
         <t hangText="since"><vspace/>An optional integer NumericDate value 
         that indicates the oldest time of unacknowledged SETs to be 
         returned. </t>
         <t hangText="before"><vspace/>An optional integer NumericDate
         value that indicates the earliest time of unacknowledged SETs
         to be returned. </t>
         <t hangText="returnImmediately"><vspace/>A boolean value
         which indicates if the Event Transmitter SHALL return a response
         immediately if no results are available. The default value is
         <spanx style="verb">false</spanx> indicating the request will
         wait pending availability of a SET or until the request
         times out. The time out for the request is part of the Stream
         configuration which is out of scope of this specification.</t>
       </list></t>
       
       <t>In order to support multi-threaded polling, an Event 
       Transmitter MAY choose to track undelivered versus unacknowledged
       SETs internally. When multiple Event Receiver threads poll
       simultaneously, the Event
       Transmitter typically returns the maximum number of SETs allowed
       in a response to the first thread request received. Each subsequent
       request receives the next batch of SETs and so on.</t>
       <t>To facilitate recovery of unacknowledged SETs, the Event
       Receiver MAY use the parameter <spanx style="verb">before</spanx>
       and/or <spanx style="verb">since</spanx>. Upon receipt of a 
       request with these parameters, the Event Transmitter SHALL 
       attempt to return all unacknowledged SETs, regardless of whether
       the Event Transmitter believes they were previously distributed. 
       Previously acknowledged SETS (see <xref target="pollGetAck"/>) are not 
       typically returned and SHOULD NOT be recoverable.</t>
       <t>[[TBD: WG to discuss merits of multi-threaded and recovery support and 
       protocol signaling requirements.]]</t>
       
       <figure anchor="pollRequest" title="Example Poll Request">
       <preamble>The following is a non-normative example poll request to the
       endpoint: <spanx style="verb">https://nofity.exampleidp.com/Events</spanx>.</preamble>
       <artwork align="left">GET /Events?returnImmediately=true&amp;since=1458496025  HTTP/1.1

Host: notify.exampleidp.com
Accept: application/json
Authorization: Bearer h480djs93hd8
</artwork>
       </figure>
       
       <t>In response to the HTTP GET, the Event Transmitter checks for 
       available SET events and responds with a JSON document containing
       the following attributes:
       <list style="hanging">
        <t hangText="sets"><vspace/>A required JSON attribute whose value is a JSON
        object that contains zero or more nested JSON attributes. Each nested
        attribute corresponds to the <spanx style="verb">jti</spanx> of
        a SET to be delivered and whose value is a JSON String containing
        the value of the encoded corresponding SET. If there are no
        outstanding SETs to be transmitted, the JSON object SHALL be empty.</t>
        <t hangText="since"><vspace/>
        An optional JSON attribute whose integer value
        is a NumericDate and indicates the time of the oldest SET that 
        was returned. 
        </t>
        <t hangText="before"><vspace/>
        An optional JSON attribute whose integer
        value is a NumericDate and indicates the time of the youngest
        SET that was returned.</t>
        <t hangText="moreAvailable"><vspace/>
        An optional JSON attribute whose boolean value indicates if
        more unacknowledged SETs are available to be returned. 
        </t>
       </list>
       </t>
       
       <figure anchor="pollResponse" title="Example Poll Response">
       <preamble>The following is a non-normative example response to
       the request shown <xref target="pollRequest"/>.</preamble>
       <artwork align="left">HTTP/1.1 200 OK
Content-Type: application/json
Location: https://notify.exampleidp/Events

{
"sets":{
  "4d3559ec67504aaba65d40b0363faad8":
   "eyJhbGciOiJub25lIn0.
   eyJqdGkiOiI0ZDM1NTllYzY3NTA0YWFiYTY1ZDQwYjAzNjNmYWFkOCIsImlhdCI6MTQ
   1ODQ5NjQwNCwiaXNzIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tIiwiYXVkIjpbIm
   h0dHBzOi8vc2NpbS5leGFtcGxlLmNvbS9GZWVkcy85OGQ1MjQ2MWZhNWJiYzg3OTU5M
   2I3NzU0IiwiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tL0ZlZWRzLzVkNzYwNDUxNmIx
   ZDA4NjQxZDc2NzZlZTciXSwiZXZlbnRzIjp7InVybjppZXRmOnBhcmFtczpzY2ltOmV
   2ZW50OmNyZWF0ZSI6eyJyZWYiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcn
   MvNDRmNjE0MmRmOTZiZDZhYjYxZTc1MjFkOSIsImF0dHJpYnV0ZXMiOlsiaWQiLCJuY
   W1lIiwidXNlck5hbWUiLCJwYXNzd29yZCIsImVtYWlscyJdfX19.",
  "3d0c3cf797584bd193bd0fb1bd4e7d30":
   "eyJhbGciOiJub25lIn0.
   eyJqdGkiOiIzZDBjM2NmNzk3NTg0YmQxOTNiZDBmYjFiZDRlN2QzMCIsImlhdCI6MTQ
   1ODQ5NjAyNSwiaXNzIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tIiwiYXVkIjpbIm
   h0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZWVkcy85OGQ1MjQ2MWZhNWJiYzg3OTU5M
   2I3NzU0IiwiaHR0cHM6Ly9qaHViLmV4YW1wbGUuY29tL0ZlZWRzLzVkNzYwNDUxNmIx
   ZDA4NjQxZDc2NzZlZTciXSwic3ViIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tL1V
   zZXJzLzQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJldmVudHMiOnsidXJuOmlldG
   Y6cGFyYW1zOnNjaW06ZXZlbnQ6cGFzc3dvcmRSZXNldCI6eyJpZCI6IjQ0ZjYxNDJkZ
   jk2YmQ2YWI2MWU3NTIxZDkifSwiaHR0cHM6Ly9leGFtcGxlLmNvbS9zY2ltL2V2ZW50
   L3Bhc3N3b3JkUmVzZXRFeHQiOnsicmVzZXRBdHRlbXB0cyI6NX19fQ."
 },
 "since":1458496025
}</artwork></figure>
       <t>In the above example, a two SETs whose <spanx style="verb">jti</spanx>
       are <spanx style="verb">4d3559ec67504aaba65d40b0363faad8</spanx> 
       and <spanx style="verb">3d0c3cf797584bd193bd0fb1bd4e7d30</spanx> 
       are delivered.</t>
       
              <figure anchor="emptyPollResponse" title="Example No SETs Poll Response">
       <preamble>The following is a non-normative example response to
       the request shown <xref target="pollRequest"/> showing no new
       SETs are available.</preamble>
       <artwork align="left">HTTP/1.1 200 OK
Content-Type: application/json
Location: https://notify.exampleidp/Events

{
 "sets":{ },
 "since":1458496025
}</artwork></figure>
       
       <t>Upon receiving the JSON document, the Event Receiver parses
       and verifies the received SETs and notifies the Event Transmitter 
       via an HTTP POST back to the Event Transmitter as described in 
       <xref target="pollGetAck"/>.</t>
       </section>
 
       <section anchor="pollGetAck" 
       title="Step 2: Acknowledging Sets">
        
        <t>Upon receiving SETs from the Event Transmitter, the Event 
        Receiver SHALL parse the JSON document received, and validate 
        each SET received and SHALL acknowledge receipt in a timely 
        (e.g. minutes) fashion so that the Event Transmitter may
        mark the SETs as received. If necessary, Event Receivers SHOULD
        acknowledge receipt before taking any local actions based on
        the SETs to avoid unnecessary delay in acknowledgement where 
        possible.</t>
        
        <t>In the case where no SETs were received in a previous poll (see 
        <xref target="emptyPollResponse"/>), the Event Receiver SHALL
        NOT perform any acknowledgment.</t>
        
        <t>To acknowledge receipt of SETs, the Event Receiver SHALL
        use HTTP POST to the same endpoint it previously retrieved the SETs
        from to deliver a JSON document containing the following JSON
        attributes: <list style="hanging">
          <t hangText="ack">Which contains an array of Strings that each
          correspond to the <spanx style="verb">jti</spanx> of a 
          successfully received SET. If there are no 
        outstanding SETs to acknowledge, the attribute MAY be omitted. 
        When acknowledging a SET, the Event Transmitter is released from
        any obligation to retain the SET (e.g. for a future re-try to
        receive).</t>
          <t hangText="errs">Whose value is a JSON Object that contains 
          one or more nested JSON attributes that correspond to the 
          <spanx style="verb">jti</spanx> of each invalid SET received.
          The value of each is a JSON object whose contents is an
          <spanx>err</spanx> attribute and <spanx>description</spanx>
          attribute whose value correspond to the errors described in 
          <xref target="errorResponse"/>.</t>
        </list>
        </t>
        
        <figure anchor="pollGoodResponse" title="Example Poll Acknowledgement No Errors">
        <preamble>The following is a non-normative example acknowledgement 
        to the SETs received in <xref target="pollResponse"/>.</preamble>
        <artwork>POST /Events  HTTP/1.1

Host: notify.exampleidp.com
Content-Type: application/json
Authorization: Bearer h480djs93hd8

{
  "ack":[
    "4d3559ec67504aaba65d40b0363faad8",
    "3d0c3cf797584bd193bd0fb1bd4e7d30"
  ]
}</artwork>
        </figure>
        
        <figure anchor="pollErrorResponse" title="Example Poll Acknowledgement With Error">
        <preamble>The following is a non-normative example error acknowledgement 
        to the SETs received in <xref target="pollResponse"/>.</preamble>
        <artwork>POST /Events  HTTP/1.1

Host: notify.exampleidp.com
Content-Type: application/json
Authorization: Bearer h480djs93hd8

{
  "ack":["3d0c3cf797584bd193bd0fb1bd4e7d30"],
  "setErrs":{
    "4d3559ec67504aaba65d40b0363faad8":{
      "err":"jwtAud",
      "description":"The audience value was incorrect."
    }
  }
}</artwork>
        </figure>
        
        <t>In response to the acknowledgement POST request, the Event
        Transmitter SHOULD respond with HTTP Status 202 (Accepted) if 
        the acknowledgement is accepted, or another appropriate HTTP
        response as defined in <xref target="RFC7231">Section 6</xref>.
        </t>
     
     
     </section>
     
     </section>
     
     <section anchor="errorResponse" title="Error Response Handling">
        <t></t>
        <t>If a SET is invalid, the following error codes are defined:</t>
        <texttable anchor="reqErrors" title="SET Errors">
          <ttcol>Err Value</ttcol><ttcol>Description</ttcol>
          <c>jwtParse</c><c>Invalid or unparsable JWT or JSON structure.</c>
          <c>jwtHdr</c><c>In invalid JWT header was detected.</c>
          <c>jwtCrypto</c><c>Unable to parse due to unsupported algorithm.</c>
          <c>jws</c><c>Signature was not validated.</c>
          <c>jwe</c><c>Unable to decrypt JWE encoded data.</c>
          <c>jwtAud</c><c>Invalid audience value.</c>
          <c>jwtIss</c><c>Issuer not recognized.</c>
          <c>setType</c><c>An unexpected event type was received.</c>
          <c>setParse</c><c>Invalid structure was encountered such as inability
          to parse SET event payload.</c>
          <c>setData</c><c>SET event claims incomplete or invalid.</c>
          <c>dup</c><c>A duplicate SET was received and has been ignored.</c>
        </texttable>
            
        <t>An error response SHALL include a JSON
        object which provides details about the error. The JSON object
        includes the JSON attributes: <list style="hanging">
          <t hangText="err"><vspace />A value which is a keyword that 
          describes the error (see <xref target="reqErrors" />).</t>
          <t hangText="description"><vspace />A human-readable text that provides
          additional diagnostic information.</t>
        </list>
        When included as part of an HTTP Status 400 response, the above
        JSON is the HTTP response body (see <xref target="badPostResponse"/>). 
        When included as part of a batch of SETs, the above JSON is included
        as part of the <spanx style="verb">setErrs</spanx> attribute as
        defined in <xref target="pollGetAck"/></t>
       
        
        </section>  
    
     
     <section anchor="verifyStream" title="Event Stream Verification">
  
        <t>To confirm an Event Stream configuration, the Event
        Transmitter SHALL send a
        verification SET to the Event Receiver using the registered 
        <spanx style="verb">methodUri</spanx> mechanism which in this case
        is <spanx style="verb">urn:ietf:params:set:method:HTTP:webCallback</spanx>. 
        </t>
        
        <t>The Verify SET contains the following attributes:<list style="hanging">
          <t hangText="events">Set with a value of 
          <spanx style="verb">[[this RFC URL]]#verify</spanx>.</t>

          <t hangText="iss">Set to the URI defined in the Event Stream
          configuration.</t>

          <t hangText="aud">MUST be set to a value that matches the
          EventStream <spanx style="verb">aud</spanx> value agreed to.</t>

          <t hangText="exp">A value that indicates the
          time the verification request will expire. Once expired, the
          server will set the Event Stream state to <spanx style="verb">fail</spanx>.</t>
          
        </list>
        </t>
        
        <t>
        If the Event Stream <spanx style="verb">confidentialJWK</spanx>
        value was supplied, then the SET SHOULD be encrypted with 
        the provided key. Successful parsing of the
        message confirms that provides confirmation of correct 
        configuration and possession of keys.</t>
          
        <t>A payload attribute <spanx style="verb">confirmChallenge</spanx>
        is provided with a JSON String value that the Event Receiver SHALL echo 
        back in its response. The intent is to confirm that the Event Receiver 
        has successfully parsed the SET and is not just echoing back 
        HTTP success.</t>

        <figure anchor="verifyPostEvent" title="Example Verification SET with Challenge">
        <preamble>A non-normative JSON representation of an event to be
        sent to a Event Receiver as a Event Stream confirmation. Note the
        event is not yet encoded as a JWT token:</preamble>
<artwork>{  
  "jti": "4d3559ec67504aaba65d40b0363faad8",
  "events":["[[this RFC URL]]#verify"],
  "iat": 1458496404,
  "iss": "https://scim.example.com",  
  "exp": 1458497000,
  "aud":[
   "https://scim.example.com/Feeds/98d52461fa5bbc879593b7754",
   "https://scim.example.com/Feeds/5d7604516b1d08641d7676ee7"
  ], 
  "[[this RFC URL]]#verify":{
    "confirmChallenge":"ca2179f4-8936-479a-a76d-5486e2baacd7"
  }  
}</artwork>
        </figure>
        
        <t>The above SET is encoded as a JWT and transmitted to the 
        Event Receiver as shown in <xref target="postSet" />.</t>

        <t>Upon receiving a verify SET, the Event Receiver SHALL 
        respond with a JSON object that includes a 
        <spanx style="verb">challengeResponse</spanx> attribute and 
        the value that was provided in <spanx style="verb">confirmChallenge</spanx>.
        The content type header is set to <spanx style="verb">application/json</spanx>.</t>
        
        <figure anchor="verifyPostResponse" title="Example Response to Verify SET with Challenge">
          <preamble>
The following is a non-normative example response to a Verify SET 
received via HTTP/1.1 POST and includes a JSON object containing the 
confirmation attribute and value.</preamble>
<artwork>HTTP/1.1 200 OK
Content-Type: application/json

{  
  "challengeResponse":"ca2179f4-8936-479a-a76d-5486e2baacd7"
}</artwork>
        </figure>

        <t>
        If the Event Receiver returns a non-matching value or an HTTP status
        other than a 200 series response,  the Event Stream 
        <spanx style="verb">state</spanx> SHALL be set to <spanx style="verb">fail</spanx>.
        A declining Event Receiver MAY simply respond with any 400 series HTTP
        error (e.g. 404).</t>
          
     </section>
   </section><section anchor="Security" title="Security Considerations" toc="default">

      <t>[TO BE COMPLETED]</t>
   </section>

    <section anchor="IANA" title="IANA Considerations">
      
      <t>[TO BE COMPLETED]</t>

  
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5988.xml' ?>
      
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7231.xml' ?><!-- HTTP Semantics -->
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7519.xml' ?><!-- JWT -->
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7517.xml' ?><!-- JWK -->
   
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-secevent-token-00.xml'?>

    </references>

    <references title="Informative References">
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3339.xml' ?>
    
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7515.xml' ?><!-- JWS -->
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7516.xml' ?><!-- JWE -->
      
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7644.xml' ?><!-- SCIM API -->
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.7643.xml' ?><!-- SCIM Schema -->

     <reference anchor="POSIX.1">
  <front>
    <title>The Open Group Base Specifications Issue 7</title>
    <author>
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2013"/>
  </front>
  <seriesInfo value="Std 1003.1, 2013 Edition" name="IEEE"/>
  <format target="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_15"
    type="HTML" />
      </reference>

      <reference anchor="openid-connect-core">
        <front>
          <title>OpenID Connect Core 1.0</title>
          <author fullname="Nat Sakimura et al"><organization>NRI</organization></author>
          <date day="8" month="Nov" year="2014"/>
        </front>
        <format type="HTML" target="http://openid.net/specs/openid-connect-core-1_0.html"/>
      </reference>
      <reference anchor="saml-core-2.0">
        <front>
          <title>Assertions and Protocols for the OASIS Security Assertion Markup Language (SAML) V2.0</title>
          <author fullname="Scott Cantor et al"><organization>Internet2</organization></author>
          <date day="15" month="March" year="2005"/>
        </front>
        <format type="PDF" target="http://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf"/>
      </reference>
      <reference anchor="idevent-scim">
        <front>
          <title>SCIM Event Extensions (work in progress)</title>
          <author fullname="Phil Hunt"><organization>Oracle Corporation</organization></author>
          <date/>
        </front>  
        <format type="TXT" target="draft-hunt-idevent-scim-00.txt"/>    
      </reference>

     <!-- 
      <reference anchor="Order-Operations">
        <front>
          <title>Order of Operations: Programming Languages</title>

          <author>
            <organization>Wikipedia</organization>
          </author>

          <date/>
        </front>

        <format target="http://en.wikipedia.org/wiki/Order_of_operations#Programming_languages"
                type="HTML"/>
      </reference>
       -->
    </references>

    

    <section title="Acknowledgments">
      <t>The editors would like to thanks the members of the SCIM WG which 
      began discussions of provisioning events starting with: draft-hunt-scim-notify-00 in 2015.</t>
      
      <t>The editor would like to thank the participants in the the SECEVENTS
      working group for their support of this specification.</t>
    </section>

    <section title="Change Log">
      <t>Draft 00 - PH - First Draft based on reduced version of draft-hunt-idevent-distribution</t>
      <t>Draft 01 - PH - <list style="symbols">
        <t>Reworked terminology to match new WG Transmitter/Receiver terms</t>
        <t>Reworked sections into Data Plane vs. Control Plane</t>
        <t>Removed method transmission registry in order to simplify the specification</t>
        <t>Made Create, Update operations optional for Control Plane (Read is MTI)</t>
      </list></t>
      <t>Draft 02 - PH <list style="symbols">
        <t>Added iss metadata for Event Stream</t>
        <t>Changed to using JWKS_uri for issuer and receiver.</t>
        <t>Control Plane sections moved to draft-hunt-secevent-stream-mgmt</t>
        <t>Added support for delivering multiple events using HTTP GET polling</t>
      </list></t>
      
    </section>
  </back>
</rfc>
