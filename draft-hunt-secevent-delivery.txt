



Network Working Group                                       P. Hunt, Ed.
Internet-Draft                                                    Oracle
Intended status: Standards Track                            M. Scurtescu
Expires: November 19, 2017                                        Google
                                                            May 18, 2017


                     SET Token Delivery Using HTTP
                    draft-hunt-secevent-delivery-00

Abstract

   This specification defines how a series of security event tokens
   (SETs) may be delivered to a previously registered receiver using
   HTTP GET or POST over TLS.  The specification also defines how
   delivery can be assured subject to the SET Token Receiver's need for
   assurance.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 19, 2017.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of




Hunt & Scurtescu        Expires November 19, 2017               [Page 1]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction and Overview . . . . . . . . . . . . . . . . . .   2
     1.1.  Notational Conventions  . . . . . . . . . . . . . . . . .   3
     1.2.  Definitions . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  SET Delivery Data Plane . . . . . . . . . . . . . . . . . . .   5
     2.1.  Event Delivery Process  . . . . . . . . . . . . . . . . .   5
     2.2.  HTTP POST Delivery  . . . . . . . . . . . . . . . . . . .   6
     2.3.  Delivery using HTTP Polling . . . . . . . . . . . . . . .   8
       2.3.1.  Step 1: Polling for SETs  . . . . . . . . . . . . . .   9
       2.3.2.  Step 2: Acknowledging Sets  . . . . . . . . . . . . .  13
     2.4.  Error Response Handling . . . . . . . . . . . . . . . . .  15
     2.5.  Event Stream Verification . . . . . . . . . . . . . . . .  15
   3.  Authentication and Authorization  . . . . . . . . . . . . . .  17
     3.1.  Use of Tokens as Authorizations . . . . . . . . . . . . .  19
   4.  Security Considerations . . . . . . . . . . . . . . . . . . .  19
     4.1.  Authentication Using Signed SETs  . . . . . . . . . . . .  19
     4.2.  HTTP Considerations . . . . . . . . . . . . . . . . . . .  19
     4.3.  TLS Support Considerations  . . . . . . . . . . . . . . .  20
     4.4.  Authorization Token Considerations  . . . . . . . . . . .  20
     4.5.  Bearer and Cookie Considerations  . . . . . . . . . . . .  20
   5.  Privacy Considerations  . . . . . . . . . . . . . . . . . . .  21
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  21
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  21
     7.1.  Normative References  . . . . . . . . . . . . . . . . . .  21
     7.2.  Informative References  . . . . . . . . . . . . . . . . .  22
   Appendix A.  Acknowledgments  . . . . . . . . . . . . . . . . . .  24
   Appendix B.  Change Log . . . . . . . . . . . . . . . . . . . . .  24
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  25

1.  Introduction and Overview

   This specification defines how a stream of SETs (see
   [I-D.ietf-secevent-token]) can be transmitted to a previously
   registered Event Receiver using HTTP [RFC7231] over TLS.  The
   specification defines a method to push SETs via HTTP POST and to poll
   for SETs using HTTP GET.

   This specification defines to methods of SET delivery in what is
   known as Event Streams.  The specification includes a verification
   process which tests and validates Event Stream configuration.

   This specification does not define the method by which Event Streams
   are defined, provisioned, managed, monitored, and configured and is
   out of scope of this specification.



Hunt & Scurtescu        Expires November 19, 2017               [Page 2]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   [[This work is TBD by the SECEVENTS WG]]

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119] . These
   keywords are capitalized when used to unambiguously specify
   requirements of the protocol or application features and behavior
   that affect the inter-operability and security of implementations.
   When these words are not capitalized, they are meant in their
   natural-language sense.

   For purposes of readability examples are not URL encoded.
   Implementers MUST percent encode URLs as described in Section 2.1 of
   [RFC3986] .

   Throughout this documents all figures MAY contain spaces and extra
   line-wrapping for readability and space limitations.  Similarly, some
   URI's contained within examples, have been shortened for space and
   readability reasons.

1.2.  Definitions

   This specification assumes terminology defined in the Security Event
   Token specification[I-D.ietf-secevent-token] .

   The following definitions are defined for Security Event
   distribution:

   Identity Provider
      An Identity Provider is a service provider that issues
      authentication assertions that may be used by Relying Party
      service providers to establish login sessions with users.
      Examples of Identity Providers are defined in: OpenID Connect
      [openid-connect-core] and SAML2 [saml-core-2.0].  For the purpose
      of this specification an Identity Provider also includes any
      provider of services where the compromise of an account may open
      up relying parties to attack.  For example for the purposes of
      security events, an email service provider could be considered an
      "implicit" Identity Provider.

   Relying Party
      A Relying Party is a service provider that accepts assertions from
      Identity Providers to establish sessions.  Examples of Relying
      Parties are defined in: OpenID Connect [openid-connect-core] and
      SAML2 [saml-core-2.0]




Hunt & Scurtescu        Expires November 19, 2017               [Page 3]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   Event Transmitter
      A service provider that delivers SETs to other providers known as
      Event Receivers.  Some examples of Event Transmitters are Identity
      Providers and Relying Parties.  An Event Transmitter is
      responsible for offering a service that allows the Event Receiver
      to check the Event Stream configuration and status known as the
      "Control Plane".

   Event Receiver
      A service provider that registers to receive SETs from an Event
      Transmitter and provides an endpoint to receive SETs via HTTP POST
      (known as the "Data Plane").  Some examples of Event Receivers are
      Identity Providers and Relying Parties.  Event Receivers can check
      current Event Stream configuration and status by accessing the
      Event Transmitters "Control Plane".

   Event Stream
      An Event Stream is a defined location, distribution method and
      whereby an Event Transmitter and Event Receiver exchange a pre-
      defined family of SETs.  A Stream is assumed to have configuration
      data such as HTTP endpoints, timeouts, public key sets for signing
      and encryption, and Event Families.

   Event Family
      An Event Family is a URI that describes the set of events types be
      issued in an Event Stream.

   Subject
      The security subject around which a security event has occurred.
      For example, a security subject might per a user, a person, an
      email address, a service provider entity, an IP address, an OAuth
      Client, a mobile device, or any identifiable thing referenced in
      security and authorization systems.

   Event
      An event is defined to be an event as represented by a security
      event token (SET).  See [I-D.ietf-secevent-token].

   NumericDate
      A JSON numeric value representing the number of seconds from
      1970-01-01T00:00:00Z UTC until the specified UTC date/time,
      ignoring leap seconds.  This is equivalent to the IEEE Std 1003.1,
      2013 Edition [POSIX.1] definition "Seconds Since the Epoch", in
      which each day is accounted for by exactly 86400 seconds, other
      than that non-integer values can be represented.  See [RFC3339]
      for details regarding date/times in general and UTC in particular.





Hunt & Scurtescu        Expires November 19, 2017               [Page 4]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


2.  SET Delivery Data Plane

   The data plane represents the communication channel over which a
   series of SETs are delivered to a configured Event Receiver otherwise
   known as an Event Stream.

2.1.  Event Delivery Process

   When an Event occurs, the Feed Provider constructs a SET token
   [I-D.ietf-secevent-token] that describes the event.  The SET issuer
   determines the Event Streams over which the SET should be distributed
   to.

   How SET Events are defined and the process by which events are
   identified for Event Receivers is out-of-scope of this specification.

   When a SET is available for a Event Receiver, the Feed Transmitter
   attempts to deliver the SET based on the Event Receiver's registered
   delivery mechanism:

   o  The Event Transmitter uses an HTTP/1.1 POST to the Event Receiver
      endpoint to deliver the SET;

   o  The Event Transmitter queues up the SET in a buffer so that an
      Event Receiver MAY poll for SETs using HTTP/1.1 GET.

   o  Or, the Feed Transmitter delivers the event through a different
      method not defined by this specification.

   Delivery of SETs MAY be delivered using one of two content formats:

   Single Event(application/jwt)
      Where SETs are delivered one at a time (e.g. such as typical with
      HTTP POST) where the data payload is just a JSON Web Token
      [RFC7519] (see xxxxxxx).

   Multi-Event(application/json)  Where multiple SETs are delivered in a
      JSON structure [RFC7159].  The use of Multi-Event format is
      typically used with delivery methods that poll (e.g.  HTTP GET).

   After successful delivery of SETs, Feed Transmitters SHOULD NOT be
   required to maintain or record SETs for recovery.  Once a SET is
   delivered, the Event Receiver SHALL be responsible for retention and
   recovery.

   Transmitted SETs SHOULD be self-validating (e.g. signed) in order to
   verify they were issued by the Event Transmitter at a later date when




Hunt & Scurtescu        Expires November 19, 2017               [Page 5]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   de-coupled from the original delivery via HTTP where authenticity
   could be checked via the HTTP or TLS mutual authentication.

   If delivery to any particular Event Receiver has been delayed for an
   extended period of time, the Feed Transmitter MAY suspend the
   affected Event Stream and even stop maintaining outstanding SETs for
   the Event Receiver at its discretion and available resources.  The
   method by which the Event Receiver discovers and recovers these SETs
   is out of scope of this specification.

   Upon receiving a SET, the Event Receiver reads the SET and validates
   it.  The receiver MUST then inform the Event transmitter, using the
   defined method of any authentication, configuration, parsing or JWT
   validation errors that occur.

   Based upon the content of the token, the Event Receiver decides what,
   if any, action needs to be taken in response to the received SET.
   For example, in response to a SCIM provisioning event [idevent-scim]
   indicating a changed resource, the Event Receiver might perform a
   SCIM GET request (see Section 3.4 [RFC7644]) to the affected resource
   URI in order to confidentially obtain the current state of the
   transmitter's affected SCIM resource in order to reconcile local
   corresponding state changes.

   The action a Event Receiver takes in response to a SET MAY be
   substantially different than merely copying the action of the SET
   issuer.  A single SET can trigger one or more receiver actions or it
   can be ignored.  For example, upon receiving notification that a user
   resource has been added to a group, the Event Receiver may first
   determine that the user does not exist in the Event Receiver's
   domain.  The Event Receiver translates the event into two actions:

   1.  Retrieve the user (e.g. using SCIM GET) and then provisions the
       user locally.  After enabling the user,

   2.  The Event Receiver then enables the user for the application
       associated with membership in the issuer's group.

   The Event Receiver SHALL NOT use the Event acknowledgement mechanism
   to report Event errors other than related to the validation and
   parsing of the SET token itself.

2.2.  HTTP POST Delivery

   This method allows an Event Transmitter to use HTTP POST
   (Section 4.3.3 [RFC7231]) to deliver SETs to the registered web
   callback URI identified in the Event Stream configuration.




Hunt & Scurtescu        Expires November 19, 2017               [Page 6]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   The SET to be delivered MAY be signed and/or encrypted as defined in
   [I-D.ietf-secevent-token].

   The Event Stream configuration defines a URI the of an Event Receiver
   provided endpoint which accepts HTTP POST requests (e.g.
   "https://notify.examplerp.com/Events").

   The HTTP Content-Type (see Section 3.1.1.5 [RFC7231]) for the HTTP
   POST is "application/jwt" and SHALL consist of a single SET token
   (see [I-D.ietf-secevent-token]).  As per Section 5.3.2 [RFC7231], the
   expected media type ("Accept" header) response is "application/json".

   To deliver an event, the Event Transmitter generates an event
   delivery message and uses HTTP POST to the configured endpoint with
   the appropriate "Accept" and "Content-Type" headers.

   POST /Events  HTTP/1.1

   Host: notify.examplerp.com
   Accept: application/json
   Authorization: Bearer h480djs93hd8
   Content-Type: application/jwt
   "eyJhbGciOiJub25lIn0
   .
   eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
   kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
   FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
   WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
   WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
   hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
   VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
   SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
   b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
   tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
   1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
   .

                    Figure 1: Example HTTP POST Request

   Upon receipt of the request, the Event Receiver SHALL validate the
   JWT structure of the SET as defined in Section 7.2 [RFC7519].  The
   Event Receiver SHALL also validate the SET information as described
   in Section 2 [I-D.ietf-secevent-token].

   If the SET is determined to be valid, the Event Receiver SHALL
   "acknowledge" successful submission by responding with HTTP Status
   202 as "Accepted" (see Section 6.3.3 [RFC7231]).  In order to
   maintain compatibility with other methods of transmission, the Event



Hunt & Scurtescu        Expires November 19, 2017               [Page 7]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   Receiver SHOULD NOT include a response body representation of the
   submitted SET or what the SET's pending status is.  The purpose of
   the response is solely to acknowledge successful receipt or to
   indicate any SET parsing, cryptographic errors.

   The following is a non-normative example of a successful receipt of a
   SET.

   HTTP/1.1 202 Accepted

              Figure 2: Example Successful Delivery Response

   Note that the purpose of the "acknowledgement" is to let the Event
   Transmitter know that a SET has been delivered and the information no
   longer needs to be retained by the Event Transmitter.  Before
   acknowledgement, Event Receivers SHOULD ensure they have validated
   received SETs and retained them in a manner appropriate to
   information retention requirements appropriate to the SET event types
   signaled.  The level of retention and method of SETs by Event
   Receivers is out-of-scope of this specification.

   In the event of a general HTTP error condition, the Event Receiver
   MAY respond with an appropriate HTTP Status code as defined in
   Section 6 [RFC7231].

   When the Event Receiver detects an error parsing or validating a
   received SET (as defined by [I-D.ietf-secevent-token]), the Event
   Receiver SHALL indicate an HTTP Status 400 error with an error code
   as described in Section 2.4.

   The following is an example non-normative error response.

   HTTP/1.1 400 Bad Request
   Content-Type: application/json

   {
     "err":"dup",
     "description":"SET already received. Ignored."

   }

                Figure 3: Example HTTP Status 400 Response

2.3.  Delivery using HTTP Polling

   This method allows an Event Receiver to use HTTP GET (Section 4.3.1
   [RFC7231]) to check for and receive zero or more SETs at a periodic




Hunt & Scurtescu        Expires November 19, 2017               [Page 8]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   interval (short polling) or to poll for SETs and wait pending
   availability also known as long polling (see Section 2 [RFC6202]).

   To acknowledge receipt of SETs, the Event Receiver performs an HTTP
   POST request to acknowledge successful transfer of SETs and/or to
   indicate appropriate errors as specified in Section 2.3.2.

   The delivery of SETs in this method is facilitated by a two-request
   method initiated by the Event Receiver:

   1.  The Event Receiver polls for available SETs using an HTTP GET to
       a pre-arranged endpoint provided by the Event Transmitter.

   2.  If any SETs are received, the Event Receiver "acknowledges"
       received SETs, using an HTTP POST to the same endpoint used to
       poll for SETs.

   Note that the purpose of the "acknowledgement" is to let the Event
   Transmitter know that a SET has been delivered and the SET no longer
   needs to be retained by the Event Transmitter for recovery or
   retransmission.  Before acknowledgement, Event Receivers SHOULD
   ensure they have validated received SETs and retained them in a
   manner appropriate to the receivers information retention
   requirements.  The level and method of retention of SETs by Event
   Receivers is out-of-scope of this specification.

2.3.1.  Step 1: Polling for SETs

   The Event Receiver performs an HTTP GET (see Section 4.3.1 [RFC7231])
   to a pre-arranged polling endpoint URI to check for any new or
   unacknowledged SETs that are available.

   The following polling parameters are supported:

   maxEvents
      an integer value indicating the maximum number of unacknowledged
      SETs that SHOULD be returned.  If more than the maximum number of
      SETs are available, the oldest SETs available SHOULD be returned
      first.

   since
      An optional integer NumericDate value that indicates the oldest
      time of unacknowledged SETs to be returned.

   before
      An optional integer NumericDate value that indicates the earliest
      time of unacknowledged SETs to be returned.




Hunt & Scurtescu        Expires November 19, 2017               [Page 9]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   returnImmediately
      A boolean value which indicates if the Event Transmitter SHALL
      return a response immediately if no results are available (short
      polling).  The default value is "false" indicating the request is
      to be treated as a long poll (see Section 2 [RFC6202]).  The time
      out for the request is part of the Stream configuration which is
      out of scope of this specification.

   To facilitate recovery of unacknowledged SETs, the Event Receiver MAY
   use the parameter "before" and/or "since".  Upon receipt of a request
   with these parameters, the Event Transmitter SHALL attempt to return
   all unacknowledged SETs, regardless of whether the Event Transmitter
   believes they were previously distributed.  Previously acknowledged
   SETS (see Section 2.3.2) are not typically returned and SHOULD NOT be
   recoverable.

   To support possible multi-threaded polling, an Event Transmitter may
   choose to track unacknowledged vs undelivered SETs internally.  When
   multiple Event Receiver threads poll simultaneously, the Event
   Transmitter is expected to return the maximum number of SETs allowed
   in a response to the first thread request received.  Each subsequent
   request receives the next batch of undelivered SETs and so on.

   [[WG Discuss: Discuss merits of multi-threaded and recovery support
   and additional protocol requirements.]]

   The following is a non-normative example poll request to the
   endpoint: "https://nofity.exampleidp.com/Events".

   GET /Events?returnImmediately=true&since=1458496025  HTTP/1.1

   Host: notify.exampleidp.com
   Authorization: Bearer h480djs93hd8
   Accept: application/json
   Authorization: Bearer h480djs93hd8

                      Figure 4: Example Poll Request

   In response to a HTTP GET request, the Event Transmitter checks for
   available SET events and responds with a JSON document containing the
   following attributes:

   sets
      A required JSON attribute whose value is a JSON object that
      contains zero or more nested JSON attributes.  Each nested
      attribute corresponds to the "jti" of a SET to be delivered and
      whose value is a JSON String containing the value of the encoded




Hunt & Scurtescu        Expires November 19, 2017              [Page 10]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


      corresponding SET.  If there are no outstanding SETs to be
      transmitted, the JSON object SHALL be empty.

   since
      An optional JSON attribute whose integer value is a NumericDate
      and indicates the time of the oldest SET that was returned.

   before
      An optional JSON attribute whose integer value is a NumericDate
      and indicates the time of the youngest SET that was returned.

   moreAvailable
      An optional JSON attribute whose boolean value indicates if more
      unacknowledged SETs are available to be returned.





































Hunt & Scurtescu        Expires November 19, 2017              [Page 11]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   The following is a non-normative example response to the request
   shown Figure 4.  This example shows two SETs are returned.

  HTTP/1.1 200 OK
  Content-Type: application/json
  Location: https://notify.exampleidp/Events

  {
  "sets":{
    "4d3559ec67504aaba65d40b0363faad8":
     "eyJhbGciOiJub25lIn0.
     eyJqdGkiOiI0ZDM1NTllYzY3NTA0YWFiYTY1ZDQwYjAzNjNmYWFkOCIsImlhdCI6MTQ
     1ODQ5NjQwNCwiaXNzIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tIiwiYXVkIjpbIm
     h0dHBzOi8vc2NpbS5leGFtcGxlLmNvbS9GZWVkcy85OGQ1MjQ2MWZhNWJiYzg3OTU5M
     2I3NzU0IiwiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tL0ZlZWRzLzVkNzYwNDUxNmIx
     ZDA4NjQxZDc2NzZlZTciXSwiZXZlbnRzIjp7InVybjppZXRmOnBhcmFtczpzY2ltOmV
     2ZW50OmNyZWF0ZSI6eyJyZWYiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcn
     MvNDRmNjE0MmRmOTZiZDZhYjYxZTc1MjFkOSIsImF0dHJpYnV0ZXMiOlsiaWQiLCJuY
     W1lIiwidXNlck5hbWUiLCJwYXNzd29yZCIsImVtYWlscyJdfX19.",
    "3d0c3cf797584bd193bd0fb1bd4e7d30":
     "eyJhbGciOiJub25lIn0.
     eyJqdGkiOiIzZDBjM2NmNzk3NTg0YmQxOTNiZDBmYjFiZDRlN2QzMCIsImlhdCI6MTQ
     1ODQ5NjAyNSwiaXNzIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tIiwiYXVkIjpbIm
     h0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZWVkcy85OGQ1MjQ2MWZhNWJiYzg3OTU5M
     2I3NzU0IiwiaHR0cHM6Ly9qaHViLmV4YW1wbGUuY29tL0ZlZWRzLzVkNzYwNDUxNmIx
     ZDA4NjQxZDc2NzZlZTciXSwic3ViIjoiaHR0cHM6Ly9zY2ltLmV4YW1wbGUuY29tL1V
     zZXJzLzQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJldmVudHMiOnsidXJuOmlldG
     Y6cGFyYW1zOnNjaW06ZXZlbnQ6cGFzc3dvcmRSZXNldCI6eyJpZCI6IjQ0ZjYxNDJkZ
     jk2YmQ2YWI2MWU3NTIxZDkifSwiaHR0cHM6Ly9leGFtcGxlLmNvbS9zY2ltL2V2ZW50
     L3Bhc3N3b3JkUmVzZXRFeHQiOnsicmVzZXRBdHRlbXB0cyI6NX19fQ."
   },
   "since":1458496025
  }

                      Figure 5: Example Poll Response

   In the above example, a two SETs whose "jti" are
   "4d3559ec67504aaba65d40b0363faad8" and
   "3d0c3cf797584bd193bd0fb1bd4e7d30" are delivered.












Hunt & Scurtescu        Expires November 19, 2017              [Page 12]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   The following is a non-normative example response to the request
   shown Figure 4 showing no new SETs or unacknowledged SETs are
   available.

   HTTP/1.1 200 OK
   Content-Type: application/json
   Location: https://notify.exampleidp/Events

   {
    "sets":{ },
    "since":1458496025
   }

                  Figure 6: Example No SETs Poll Response

   Upon receiving the JSON document, the Event Receiver parses and
   verifies the received SETs and notifies the Event Transmitter via an
   HTTP POST back to the Event Transmitter as described in
   Section 2.3.2.

2.3.2.  Step 2: Acknowledging Sets

   Upon receiving SETs from the Event Transmitter, the Event Receiver
   SHALL parse the JSON document received, and validate each SET
   received and SHALL acknowledge receipt in a timely (e.g. minutes)
   fashion so that the Event Transmitter may mark the SETs as received.
   Event Receivers SHOULD acknowledge receipt before taking any local
   actions based on the SETs to avoid unnecessary delay in
   acknowledgement where possible.

   In the case where no SETs were received in a previous poll (see
   Figure 6), the Event Receiver SHALL NOT perform any acknowledgment.

   To acknowledge receipt of SETs, the Event Receiver SHALL use HTTP
   POST to the same endpoint it previously retrieved the SETs from to
   deliver a JSON document containing the following JSON attributes:

   ack  Which contains an array of Strings that each correspond to the
      "jti" of a successfully received SET.  If there are no outstanding
      SETs to acknowledge, the attribute MAY be omitted.  When
      acknowledging a SET, the Event Transmitter is released from any
      obligation to retain the SET (e.g. for a future re-try to
      receive).

   errs  Whose value is a JSON Object that contains one or more nested
      JSON attributes that correspond to the "jti" of each invalid SET
      received.  The value of each is a JSON object whose contents is an




Hunt & Scurtescu        Expires November 19, 2017              [Page 13]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


      _err_ attribute and _description_ attribute whose value correspond
      to the errors described in Section 2.4.

   The following is a non-normative example acknowledgement to the SETs
   received in Figure 5.

   POST /Events  HTTP/1.1

   Host: notify.exampleidp.com
   Authorization: Bearer h480djs93hd8
   Content-Type: application/json
   Authorization: Bearer h480djs93hd8

   {
     "ack":[
       "4d3559ec67504aaba65d40b0363faad8",
       "3d0c3cf797584bd193bd0fb1bd4e7d30"
     ]
   }

             Figure 7: Example Poll Acknowledgement No Errors

   The following is a non-normative example of a response acknowledging
   1 error and 1 receipt of two SETs received in Figure 5.

   POST /Events  HTTP/1.1

   Host: notify.exampleidp.com
   Authorization: Bearer h480djs93hd8
   Content-Type: application/json
   Authorization: Bearer h480djs93hd8

   {
     "ack":["3d0c3cf797584bd193bd0fb1bd4e7d30"],
     "setErrs":{
       "4d3559ec67504aaba65d40b0363faad8":{
         "err":"jwtAud",
         "description":"The audience value was incorrect."
       }
     }
   }

             Figure 8: Example Poll Acknowledgement With Error

   In response to the acknowledgement POST request, the Event
   Transmitter SHOULD respond with HTTP Status 202 (Accepted) if the
   acknowledgement is accepted, or another appropriate HTTP response as




Hunt & Scurtescu        Expires November 19, 2017              [Page 14]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   defined in Section 6 [RFC7231].  No HTTP response body content SHOULD
   be provided or expected.

2.4.  Error Response Handling

   If a SET is invalid, the following error codes are defined:

   +-----------+-------------------------------------------------------+
   | Err Value | Description                                           |
   +-----------+-------------------------------------------------------+
   | jwtParse  | Invalid or unparsable JWT or JSON structure.          |
   | jwtHdr    | In invalid JWT header was detected.                   |
   | jwtCrypto | Unable to parse due to unsupported algorithm.         |
   | jws       | Signature was not validated.                          |
   | jwe       | Unable to decrypt JWE encoded data.                   |
   | jwtAud    | Invalid audience value.                               |
   | jwtIss    | Issuer not recognized.                                |
   | setType   | An unexpected event type was received.                |
   | setParse  | Invalid structure was encountered such as inability   |
   |           | to parse SET event payload.                           |
   | setData   | SET event claims incomplete or invalid.               |
   | dup       | A duplicate SET was received and has been ignored.    |
   +-----------+-------------------------------------------------------+

                            Table 1: SET Errors

   An error response SHALL include a JSON object which provides details
   about the error.  The JSON object includes the JSON attributes:

   err
      A value which is a keyword that describes the error (see Table 1).

   description
      A human-readable text that provides additional diagnostic
      information.

   When included as part of an HTTP Status 400 response, the above JSON
   is the HTTP response body (see Figure 3).  When included as part of a
   batch of SETs, the above JSON is included as part of the "setErrs"
   attribute as defined in Section 2.3.2

2.5.  Event Stream Verification

   In the verify process, the Event Receiver organization initiates a
   request to the Event Transmitter to verify the Stream.  The Event
   Receiver provides a "confirm" value and a "nonce" value that the
   Event Transmitter is expected to return in the body of a Verify Event
   so that the Event Receiver can confirm end-to-end configuration of



Hunt & Scurtescu        Expires November 19, 2017              [Page 15]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   SET delivery including proper signing and encryption depending on the
   configuration of the Stream.  For example, can the Event Transmitter
   send a encrypted SET that the Receiver can decode?  The method by
   which this is initiated is out-of-scope of this specification and MAY
   be provided by a profiling specification, or by administrative
   interfaces offered by the Event Transmitter.

   To confirm an Event Stream configuration, the Event Transmitter SHALL
   send a Verify SET to the Event Receiver using the registered
   "methodUri" mechanism.

   The Verify SET contains the following attributes:

   events
      Set with a value of "[[this RFC URL]]#verify".

   iss
      Set to the URI defined in the Event Stream configuration.

   aud
      MUST be set to a value that matches the EventStream "aud" value
      agreed to.

   exp
      A value that indicates the time the verification request will
      expire.  Once expired, the server will set the Event Stream state
      to "fail".

   confirm
      The value given by the Event Receiver to the Event Transmitter to
      return in the Verify Event.

   nonce
      A value given by the Event Receiver or otherwise agreed up to
      return which SHOULD be unique to the Stream and SHOULD change with
      each test in order to distinguish tests uniquely.

   If the Event Stream is configured to encrypt SETs for the Event
   Receiver, then the SET SHOULD be encrypted with the provided key.
   Successful parsing of the message confirms that provides confirmation
   of correct configuration and possession of keys.










Hunt & Scurtescu        Expires November 19, 2017              [Page 16]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   A non-normative JSON representation of an event to be sent to a Event
   Receiver as a Event Stream confirmation.  Note the event is not yet
   encoded as a JWT token:

   {
     "jti": "4d3559ec67504aaba65d40b0363faad8",
     "events":["[[this RFC URL]]#verify"],
     "iat": 1458496404,
     "iss": "https://scim.example.com",
     "exp": 1458497000,
     "aud":[
      "https://event.example.com/Feeds/98d52461fa5bbc879593b7754"
     ],
     "[[this RFC URL]]#verify":{
       "confirm":"ca2179f4-8936-479a-a76d-5486e2baacd7",
       "nonce":"1668c993e95849869e4b3506cccdf9bf"
     }
   }

             Figure 9: Example Verification SET with Challenge

   The above SET is encoded as a JWT and transmitted to the Event
   Receiver using the configured delivery method.

   Upon receiving a verify SET, the Event Receiver SHALL parse the SET
   and verify its claims.  In particular, the Event Receiver SHALL
   confirm that the values for "confirm" and "nonce" are as expected.
   If they do not match, an error response of "setData" SHOULD be
   returned (see Section 2.4).

   In many cases, Event Transmitters MAY disable or suspend an Event
   Stream that fails to successfully verify based on the acknowledgment
   or lack of acknowledgment by the Event Receiver.

3.  Authentication and Authorization

   The SET delivery methods described in this specification are based
   upon HTTP and depend on the use of TLS and/or standard HTTP
   authentication and authorization schemes as per [RFC7235].  For
   example, the following methodologies could be used among others:

   TLS Client Authentication
      Event delivery endpoints MAY request TLS mutual client
      authentication.  See Section 7.3 [RFC5246].

   HOBA Authentication
      HTTP Origin-Bound Authentication (HOBA) is a variation on TLS
      client authentication and uses a digital-signature-based design



Hunt & Scurtescu        Expires November 19, 2017              [Page 17]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


      for an HTTP authentication method (see [RFC7486]).  The design can
      also be used in JavaScript-based authentication embedded in HTML.
      HOBA is an alternative to HTTP authentication schemes that require
      passwords and therefore avoids all problems related to passwords,
      such as leakage of server-side password databases.

   Bearer Tokens
      Bearer tokens [RFC6750] MAY be used when combined with TLS and a
      token framework such as OAuth 2.0 [RFC6749].  For security
      considerations regarding the use of bearer tokens in SET delivery
      see Section 4.5.

   Basic Authentication
      Usage of basic authentication should be avoided due to its use of
      a single factor that is based upon a relatively static, symmetric
      secret.  Implementers SHOULD combine the use of basic
      authentication with other factors.  The security considerations of
      HTTP BASIC, are well documented in [RFC7617] and SHOULD be
      considered along with using signed SETs (see SET Payload
      Authentication below).

   SET Payload Authentication  In scenarios where SETs are signed and
      the delivery method is HTTP POST (see Section 2.2), Event
      Receivers MAY elect to use Basic Authentication or not to use HTTP
      or TLS based authentication at all.  See Section 4.1 for
      considerations.

   As per Section 4.1 of [RFC7235], a SET delivery endpoint SHALL
   indicate supported HTTP authentication schemes via the "WWW-
   Authenticate" header.

   Because SET Delivery describes a simple function, authorization for
   the ability to pick-up or deliver SETs can be derived by considering
   the identity of the SET issuer, or via an authentication method
   above.  This specification considers authentication as a feature to
   prevent denial-of-service attacks.  Because SETs are not commands
   (see ), Event Receivers are free to ignore SETs that are not of
   interest.

   For illustrative purposes only, SET delivery examples show an OAuth2
   bearer token value [RFC6750] in the authorization header.  This is
   not intended to imply that bearer tokens are preferred.  However, the
   use of bearer tokens in the specification does reflect common
   implementation practice.







Hunt & Scurtescu        Expires November 19, 2017              [Page 18]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


3.1.  Use of Tokens as Authorizations

   When using bearer tokens or proof-of-possession tokens that represent
   an authorization grant such as issued by OAuth (see [RFC6749]),
   implementers SHOULD consider the type of authorization granted, any
   authorized scopes (see Section 3.3 of [RFC6749]), and the security
   subject(s) that SHOULD be mapped from the authorization when
   considering local access control rules.  Section 6 of the OAuth
   Assertions draft [RFC7521], documents common scenarios for
   authorization including:

   o  Clients using an assertion to authenticate and/or act on behalf of
      itself;

   o  Clients acting on behalf of a user; and,

   o  A Client acting on behalf of an anonymous user (e.g., see next
      section).

   When using OAuth authorization tokens, implementers MUST take into
   account the threats and countermeasures documented in the security
   considerations for the use of client authorizations (see Section 8 of
   [RFC7521]).  When using other token formats or frameworks,
   implementers MUST take into account similar threats and
   countermeasures, especially those documented by the relevant
   specifications.

4.  Security Considerations

4.1.  Authentication Using Signed SETs

   In scenarios where HTTP authorization or TLS mutual authentication
   are not used or are considered weak, JWS signed SETs SHOULD be used
   (see [RFC7515] and Security Considerations
   [I-D.ietf-secevent-token]).  This enables the Event Receiver to
   validate that the SET issuer is authorized to deliver SETs.

4.2.  HTTP Considerations

   SET delivery depends on the use of Hypertext Transfer Protocol and
   thus subject to the security considerations of HTTP Section 9
   [RFC7230] and its related specifications.

   As stated in Section 2.7.1 [RFC7230], an HTTP requestor MUST NOT
   generate the "userinfo" (i.e., username and password) component (and
   its "@" delimiter) when an "http" URI reference is generated with a
   message as they are now disallowed in HTTP.




Hunt & Scurtescu        Expires November 19, 2017              [Page 19]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


4.3.  TLS Support Considerations

   SETs contain sensitive information that is considered PII (e.g.
   subject claims).  Therefore, Event Transmitters and Event Receivers
   MUST require the use of a transport-layer security mechanism.  Event
   delivery endpoints MUST support TLS 1.2 [RFC5246] and MAY support
   additional transport-layer mechanisms meeting its security
   requirements.  When using TLS, the client MUST perform a TLS/SSL
   server certificate check, per [RFC6125].  Implementation security
   considerations for TLS can be found in "Recommendations for Secure
   Use of TLS and DTLS" [RFC7525].

4.4.  Authorization Token Considerations

   When using authorization tokens such as those issued by OAuth 2.0
   [RFC6749], implementers MUST take into account threats and
   countermeasures documented in Section 8 of [RFC7521].

4.5.  Bearer and Cookie Considerations

   Due to the possibility of interception, Bearer tokens and HTTP
   cookies MUST be exchanged using TLS.

   Bearer tokens MUST have a limited lifetime that can be determined
   directly or indirectly (e.g., by checking with a validation service)
   by the service provider.  By expiring tokens, clients are forced to
   obtain a new token (which usually involves re-authentication) for
   continued authorized access.  For example, in OAuth2, a client MAY
   use OAuth token refresh to obtain a new bearer token after
   authenticating to an authorization server.  See Section 6 of
   [RFC6749].

   Implementations supporting OAuth bearer tokens need to factor in
   security considerations of this authorization method [RFC7521].
   Since security is only as good as the weakest link, implementers also
   need to consider authentication choices coupled with OAuth bearer
   tokens.  The security considerations of the default authentication
   method for OAuth bearer tokens, HTTP BASIC, are well documented in
   [RFC7617], therefore implementers are encouraged to prefer stronger
   authentication methods.  Designating the specific methods of
   authentication and authorization are out-of-scope for the delivery of
   SET tokens, however this information is provided as a resource to
   implementers.








Hunt & Scurtescu        Expires November 19, 2017              [Page 20]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


5.  Privacy Considerations

   If a SET needs to be retained for audit purposes, JWS MAY be used to
   provide verification of its authenticity.

   Event Transmitters SHOULD attempt to specialize Event Streams so that
   the content is targeted to the specific business and protocol needs
   of subscribers.

   When sharing personally identifiable information or information that
   is otherwise considered confidential to affected users, Event
   Transmitters and Receivers MUST have the appropriate legal agreements
   and user consent or terms of service in place.

   The propagation of subject identifiers can be perceived as personally
   identifiable information.  Where possible, Event Transmitters and
   Receivers SHOULD devise approaches that prevent propagation -- for
   example, the passing of a hash value that requires the subscriber to
   already know the subject.

6.  IANA Considerations

   There are no IANA considerations.

7.  References

7.1.  Normative References

   [I-D.ietf-secevent-token]
              Hunt, P., Denniss, W., Ansari, M., and M. Jones, "Security
              Event Token (SET)", draft-ietf-secevent-token-00 (work in
              progress), January 2017.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, DOI 10.17487/RFC3986, January 2005,
              <http://www.rfc-editor.org/info/rfc3986>.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,
              DOI 10.17487/RFC5246, August 2008,
              <http://www.rfc-editor.org/info/rfc5246>.




Hunt & Scurtescu        Expires November 19, 2017              [Page 21]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   [RFC5988]  Nottingham, M., "Web Linking", RFC 5988,
              DOI 10.17487/RFC5988, October 2010,
              <http://www.rfc-editor.org/info/rfc5988>.

   [RFC6125]  Saint-Andre, P. and J. Hodges, "Representation and
              Verification of Domain-Based Application Service Identity
              within Internet Public Key Infrastructure Using X.509
              (PKIX) Certificates in the Context of Transport Layer
              Security (TLS)", RFC 6125, DOI 10.17487/RFC6125, March
              2011, <http://www.rfc-editor.org/info/rfc6125>.

   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <http://www.rfc-editor.org/info/rfc7159>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <http://www.rfc-editor.org/info/rfc7231>.

   [RFC7517]  Jones, M., "JSON Web Key (JWK)", RFC 7517,
              DOI 10.17487/RFC7517, May 2015,
              <http://www.rfc-editor.org/info/rfc7517>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <http://www.rfc-editor.org/info/rfc7519>.

   [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,
              "Recommendations for Secure Use of Transport Layer
              Security (TLS) and Datagram Transport Layer Security
              (DTLS)", BCP 195, RFC 7525, DOI 10.17487/RFC7525, May
              2015, <http://www.rfc-editor.org/info/rfc7525>.

7.2.  Informative References

   [idevent-scim]
              Oracle Corporation, "SCIM Event Extensions (work in
              progress)".

   [openid-connect-core]
              NRI, "OpenID Connect Core 1.0", Nov 2014.

   [POSIX.1]  Institute of Electrical and Electronics Engineers, "The
              Open Group Base Specifications Issue 7", IEEE Std 1003.1,
              2013 Edition, 2013.





Hunt & Scurtescu        Expires November 19, 2017              [Page 22]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   [RFC3339]  Klyne, G. and C. Newman, "Date and Time on the Internet:
              Timestamps", RFC 3339, DOI 10.17487/RFC3339, July 2002,
              <http://www.rfc-editor.org/info/rfc3339>.

   [RFC6202]  Loreto, S., Saint-Andre, P., Salsano, S., and G. Wilkins,
              "Known Issues and Best Practices for the Use of Long
              Polling and Streaming in Bidirectional HTTP", RFC 6202,
              DOI 10.17487/RFC6202, April 2011,
              <http://www.rfc-editor.org/info/rfc6202>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <http://www.rfc-editor.org/info/rfc6749>.

   [RFC6750]  Jones, M. and D. Hardt, "The OAuth 2.0 Authorization
              Framework: Bearer Token Usage", RFC 6750,
              DOI 10.17487/RFC6750, October 2012,
              <http://www.rfc-editor.org/info/rfc6750>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <http://www.rfc-editor.org/info/rfc7230>.

   [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Authentication", RFC 7235,
              DOI 10.17487/RFC7235, June 2014,
              <http://www.rfc-editor.org/info/rfc7235>.

   [RFC7486]  Farrell, S., Hoffman, P., and M. Thomas, "HTTP Origin-
              Bound Authentication (HOBA)", RFC 7486,
              DOI 10.17487/RFC7486, March 2015,
              <http://www.rfc-editor.org/info/rfc7486>.

   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", RFC 7515, DOI 10.17487/RFC7515, May
              2015, <http://www.rfc-editor.org/info/rfc7515>.

   [RFC7516]  Jones, M. and J. Hildebrand, "JSON Web Encryption (JWE)",
              RFC 7516, DOI 10.17487/RFC7516, May 2015,
              <http://www.rfc-editor.org/info/rfc7516>.

   [RFC7521]  Campbell, B., Mortimore, C., Jones, M., and Y. Goland,
              "Assertion Framework for OAuth 2.0 Client Authentication
              and Authorization Grants", RFC 7521, DOI 10.17487/RFC7521,
              May 2015, <http://www.rfc-editor.org/info/rfc7521>.





Hunt & Scurtescu        Expires November 19, 2017              [Page 23]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


   [RFC7617]  Reschke, J., "The 'Basic' HTTP Authentication Scheme",
              RFC 7617, DOI 10.17487/RFC7617, September 2015,
              <http://www.rfc-editor.org/info/rfc7617>.

   [RFC7643]  Hunt, P., Ed., Grizzle, K., Wahlstroem, E., and C.
              Mortimore, "System for Cross-domain Identity Management:
              Core Schema", RFC 7643, DOI 10.17487/RFC7643, September
              2015, <http://www.rfc-editor.org/info/rfc7643>.

   [RFC7644]  Hunt, P., Ed., Grizzle, K., Ansari, M., Wahlstroem, E.,
              and C. Mortimore, "System for Cross-domain Identity
              Management: Protocol", RFC 7644, DOI 10.17487/RFC7644,
              September 2015, <http://www.rfc-editor.org/info/rfc7644>.

   [saml-core-2.0]
              Internet2, "Assertions and Protocols for the OASIS
              Security Assertion Markup Language (SAML) V2.0", March
              2005.

Appendix A.  Acknowledgments

   The editors would like to thanks the members of the SCIM WG which
   began discussions of provisioning events starting with: draft-hunt-
   scim-notify-00 in 2015.

   The editor would like to thank the participants in the the SECEVENTS
   working group for their support of this specification.

Appendix B.  Change Log

   Draft 00 - Based on draft-hunt-secevent.distribution with the
   following additions:

   o  Removed Control Plane from specification

   o  Added new HTTP Polling delivery method

   o  Added general HTTP security considerations

   o  Added authentication and authorization

   draft-hunt-secevent revision history:

   o  Draft 00 - PH - First Draft based on reduced version of draft-
      hunt-idevent-distribution

   o  Draft 01 - PH -




Hunt & Scurtescu        Expires November 19, 2017              [Page 24]

Internet-Draft      draft-hunt-secevent-distribution            May 2017


      *  Reworked terminology to match new WG Transmitter/Receiver terms

      *  Reworked sections into Data Plane vs. Control Plane

      *  Removed method transmission registry in order to simplify the
         specification

      *  Made Create, Update operations optional for Control Plane (Read
         is MTI)

   o  Draft 02 - PH

      *  Added iss metadata for Event Stream

      *  Changed to using JWKS_uri for issuer and receiver.

      *  Control Plane sections moved to draft-hunt-secevent-stream-mgmt

      *  Added support for delivering multiple events using HTTP GET
         polling

Authors' Addresses

   Phil Hunt (editor)
   Oracle Corporation

   Email: phil.hunt@yahoo.com


   Marius Scurtescu
   Google

   Email: mscurtescu@google.com


















Hunt & Scurtescu        Expires November 19, 2017              [Page 25]
