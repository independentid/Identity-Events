



Security Events Working Group                            A. Backman, Ed.
Internet-Draft                                                    Amazon
Intended status: Standards Track                           M. Jones, Ed.
Expires: March 29, 2019                                        Microsoft
                                                            P. Hunt, Ed.
                                                                  Oracle
                                                            M. Scurtescu
                                                                  Google
                                                               M. Ansari
                                                                   Cisco
                                                              A. Nadalin
                                                               Microsoft
                                                      September 25, 2018


                Push-Based SET Token Delivery Using HTTP
                    draft-ietf-secevent-http-push-00

Abstract

   This specification defines how a series of security event tokens
   (SETs) may be delivered to a previously registered receiver using
   HTTP POST over TLS initiated as a push to the receiver.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 29, 2019.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents



Backman, et al.          Expires March 29, 2019                 [Page 1]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction and Overview . . . . . . . . . . . . . . . . . .   2
     1.1.  Notational Conventions  . . . . . . . . . . . . . . . . .   3
     1.2.  Definitions . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Event Delivery  . . . . . . . . . . . . . . . . . . . . . . .   3
     2.1.  Event Delivery Process  . . . . . . . . . . . . . . . . .   3
     2.2.  Transmitting a SET  . . . . . . . . . . . . . . . . . . .   4
     2.3.  Handling a SET Transmission Request . . . . . . . . . . .   5
       2.3.1.  Success Response  . . . . . . . . . . . . . . . . . .   5
       2.3.2.  Failure Response  . . . . . . . . . . . . . . . . . .   5
       2.3.3.  Security Event Token Delivery Error Codes . . . . . .   6
       2.3.4.  Error Responses . . . . . . . . . . . . . . . . . . .   7
   3.  Authentication and Authorization  . . . . . . . . . . . . . .   7
   4.  Security Considerations . . . . . . . . . . . . . . . . . . .   7
     4.1.  Authentication Using Signed SETs  . . . . . . . . . . . .   7
     4.2.  TLS Support Considerations  . . . . . . . . . . . . . . .   7
     4.3.  Denial of Service . . . . . . . . . . . . . . . . . . . .   8
   5.  Privacy Considerations  . . . . . . . . . . . . . . . . . . .   8
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   8
     6.1.  Security Event Token Delivery Error Codes . . . . . . . .   8
       6.1.1.  Registration Template . . . . . . . . . . . . . . . .   8
       6.1.2.  Initial Registry Contents . . . . . . . . . . . . . .   9
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  12
     7.1.  Normative References  . . . . . . . . . . . . . . . . . .  12
     7.2.  Informative References  . . . . . . . . . . . . . . . . .  14
   Appendix A.  Other Streaming Specifications . . . . . . . . . . .  15
   Appendix B.  Acknowledgments  . . . . . . . . . . . . . . . . . .  16
   Appendix C.  Change Log . . . . . . . . . . . . . . . . . . . . .  17
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  18

1.  Introduction and Overview

   This specification defines how SETs (see [RFC8417]) can be
   transmitted to a previously registered SET Receiver using HTTP
   [RFC7231] over TLS.  The specification defines a method to push SETs
   via HTTP POST.






Backman, et al.          Expires March 29, 2019                 [Page 2]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   Throughout this documents all figures may contain spaces and extra
   line-wrapping for readability and space limitations.

1.2.  Definitions

   This specification assumes terminology defined in the Security Event
   Token specification[RFC8417], as well as the terms defined below:

   SET Transmitter
      A service provider that delivers SETs to other providers known as
      SET Receivers.

   SET Receiver
      A service provider that registers to receive SETs from a SET
      Transmitter and provides an endpoint to receive SETs via HTTP
      POST.

2.  Event Delivery

2.1.  Event Delivery Process

   In Push-Based SET Delivery Using HTTP, SETs are delivered one at a
   time using HTTP POST requests by a SET Transmitter to a SET Receiver,
   as described below in Section 2.2.  Upon receipt, the SET Receiver
   acknowledges receipt or indicates an error via the HTTP response, as
   described below in Section 2.3.

   After successful (acknowledged) SET delivery, SET Transmitters SHOULD
   NOT be required to maintain or record SETs for recovery.  Once a SET
   is acknowledged, the SET Receiver SHALL be responsible for retention
   and recovery.

   Transmitted SETs SHOULD be self-validating (e.g. signed) if there is
   a requirement to verify they were issued by the SET Transmitter at a
   later date when de-coupled from the original delivery where
   authenticity could be checked via the HTTP or TLS mutual
   authentication.






Backman, et al.          Expires March 29, 2019                 [Page 3]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


   Upon receiving a SET, the SET Receiver reads the SET and validates
   it.  The SET Receiver MUST acknowledge receipt to the SET
   Transmitter, using the defined acknowledgement or error method.

   The SET Receiver SHALL NOT use the Event acknowledgement mechanism to
   report Event errors other than relating to the parsing and validation
   of the SET.

2.2.  Transmitting a SET

   This method allows a SET Transmitter to use HTTP POST (Section 4.3.3
   [RFC7231]) to deliver SETs to a previously registered web callback
   URI supplied by the SET Receiver as part of a configuration process
   (not defined by this document).

   The SET to be delivered MAY be signed and/or encrypted as defined in
   [RFC8417].

   The HTTP Content-Type (see Section 3.1.1.5 [RFC7231]) for the HTTP
   POST is "application/secevent+jwt" and the request body SHALL consist
   of a single SET (see [RFC8417]).  As per Section 5.3.2 [RFC7231], the
   value of the "Accept" header is "application/json".

   The following is a non-normative example of a SET transmission HTTP
   POST request:

   POST /Events  HTTP/1.1

   Host: notify.examplerp.com
   Accept: application/json
   Content-Type: application/secevent+jwt

   eyJhbGciOiJub25lIn0
   .
   eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
   kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
   FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
   WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
   WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
   hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
   VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
   SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
   b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
   tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
   1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
   .

                Figure 1: Example SET Transmission Request



Backman, et al.          Expires March 29, 2019                 [Page 4]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


2.3.  Handling a SET Transmission Request

   Upon receipt of the request, the SET Receiver SHALL validate the JWT
   structure of the SET as defined in Section 7.2 [RFC7519].  The SET
   Receiver SHALL also validate the SET information as described in
   Section 2 [RFC8417].

2.3.1.  Success Response

   If the SET is determined to be valid, the SET Receiver SHALL
   "acknowledge" successful submission by responding with HTTP Status
   202 as "Accepted" (see Section 6.3.3 [RFC7231]).

   In order to maintain compatibility with other methods of
   transmission, the SET Receiver SHOULD NOT include an HTTP response
   body representation of the submitted SET or what the SET's pending
   status is when acknowledging success.  In the case of an error (e.g.
   HTTP Status 400), the purpose of the HTTP response body is to
   indicate any SET parsing, validation, or cryptographic errors.

   The following is a non-normative example of a successful receipt of a
   SET.

   HTTP/1.1 202 Accepted

              Figure 2: Example Successful Delivery Response

   Note that the purpose of the "acknowledgement" response is to let the
   SET Transmitter know that a SET has been delivered and the
   information no longer needs to be retained by the SET Transmitter.
   Before acknowledgement, SET Receivers SHOULD ensure they have
   validated received SETs and retained them in a manner appropriate to
   information retention requirements appropriate to the SET event types
   signaled.  The level and method of retention of SETs by SET Receivers
   is out-of-scope of this specification.

2.3.2.  Failure Response

   In the Event of a general HTTP error condition, the SET Receiver MAY
   respond with an appropriate HTTP Status code as defined in Section 6
   [RFC7231].

   When the SET Receiver detects an error parsing or validating a
   received SET (as defined by [RFC8417]), the SET Receiver SHALL
   indicate an HTTP Status 400 error with an error response as described
   in Section 2.3.4.





Backman, et al.          Expires March 29, 2019                 [Page 5]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


   The following is an example non-normative error response.

   HTTP/1.1 400 Bad Request
   Content-Type: application/json

   {
     "err":"dup",
     "description":"SET already received. Ignored."

   }

                     Figure 3: Example Error Response

2.3.3.  Security Event Token Delivery Error Codes

   Security Event Token Delivery Error Codes are strings that identify a
   specific type of error that may occur when parsing or validating a
   SET.  Every Security Event Token Delivery Error Code MUST have a
   unique name registered in the IANA "Security Event Token Delivery
   Error Codes" registry established by Section 6.1.

   The following table presents the initial set of Error Codes that are
   registered in the IANA "Security Event Token Delivery Error Codes"
   registry:

   +-----------+-------------------------------------------------------+
   | Error     | Description                                           |
   | Code      |                                                       |
   +-----------+-------------------------------------------------------+
   | json      | Invalid JSON object.                                  |
   | jwtParse  | Invalid or unparsable JWT or JSON structure.          |
   | jwtHdr    | In invalid JWT header was detected.                   |
   | jwtCrypto | Unable to parse due to unsupported algorithm.         |
   | jws       | Signature was not validated.                          |
   | jwe       | Unable to decrypt JWE encoded data.                   |
   | jwtAud    | Invalid audience value.                               |
   | jwtIss    | Issuer not recognized.                                |
   | setType   | An unexpected Event type was received.                |
   | setParse  | Invalid structure was encountered such as an          |
   |           | inability to parse or an incomplete set of Event      |
   |           | claims.                                               |
   | setData   | SET event claims incomplete or invalid.               |
   | dup       | A duplicate SET was received and has been ignored.    |
   +-----------+-------------------------------------------------------+

                     Table 1: SET Delivery Error Codes





Backman, et al.          Expires March 29, 2019                 [Page 6]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


2.3.4.  Error Responses

   An error response SHALL include a JSON object which provides details
   about the error.  The JSON object includes the JSON attributes:

   err
      A value which is a keyword that describes the error (see Table 1).

   description
      A human-readable text that provides additional diagnostic
      information.

   When included as part of an HTTP Status 400 response, the above JSON
   is the HTTP response body (see Figure 3).

3.  Authentication and Authorization

   The SET delivery method described in this specification is based upon
   HTTP and depends on the use of TLS and/or standard HTTP
   authentication and authorization schemes as per [RFC7235].

   Because SET Delivery describes a simple function, authorization for
   the ability to pick-up or deliver SETs can be derived by considering
   the identity of the SET issuer, or via other employed authentication
   methods.  Because SETs are not commands (see ), SET Receivers are
   free to ignore SETs that are not of interest.

4.  Security Considerations

4.1.  Authentication Using Signed SETs

   In scenarios where HTTP authorization or TLS mutual authentication
   are not used or are considered weak, JWS signed SETs SHOULD be used
   (see [RFC7515] and Security Considerations [RFC8417]).  This enables
   the SET Receiver to validate that the SET issuer is authorized to
   deliver SETs.

4.2.  TLS Support Considerations

   SETs contain sensitive information that is considered PII (e.g.
   subject claims).  Therefore, SET Transmitters and SET Receivers MUST
   require the use of a transport-layer security mechanism.  Event
   delivery endpoints MUST support TLS 1.2 [RFC5246] and MAY support
   additional transport-layer mechanisms meeting its security
   requirements.  When using TLS, the client MUST perform a TLS/SSL
   server certificate check, per [RFC6125].  Implementation security
   considerations for TLS can be found in "Recommendations for Secure
   Use of TLS and DTLS" [RFC7525].



Backman, et al.          Expires March 29, 2019                 [Page 7]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


4.3.  Denial of Service

   The SET Receiver may be vulnerable to a denial-of-service attack
   where a malicious party makes a high volume of requests containing
   invalid SETs, causing the endpoint to expend significant resources on
   cryptographic operations that are bound to fail.  This may be
   mitigated by authenticating SET Transmitters with a mechanism with
   low runtime overhead, such as mutual TLS or statically assigned
   bearer tokens.

5.  Privacy Considerations

   If a SET needs to be retained for audit purposes, JWS MAY be used to
   provide verification of its authenticity.

   When sharing personally identifiable information or information that
   is otherwise considered confidential to affected users, SET
   Transmitters and Receivers MUST have the appropriate legal agreements
   and user consent or terms of service in place.

   The propagation of subject identifiers can be perceived as personally
   identifiable information.  Where possible, SET Transmitters and
   Receivers SHOULD devise approaches that prevent propagation -- for
   example, the passing of a hash value that requires the subscriber to
   already know the subject.

6.  IANA Considerations

6.1.  Security Event Token Delivery Error Codes

   This document defines Security Event Token Delivery Error Codes, for
   which IANA is asked to create and maintain a new registry titled
   "Security Event Token Delivery Error Codes".  Initial values for the
   Security Event Token Delivery Error Codes registry are given in
   Table 1.  Future assignments are to be made through the Expert Review
   registration policy ([RFC8126]) and shall follow the template
   presented in Section 6.1.1.

6.1.1.  Registration Template

   Error Code
      The name of the Security Event Token Delivery Error Code, as
      described in Section 2.3.3.  The name MUST be a case-sensitive
      ASCII string consisting only of upper-case letters ("A" - "Z"),
      lower-case letters ("a" - "z"), and digits ("0" - "9").

   Description




Backman, et al.          Expires March 29, 2019                 [Page 8]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


      A brief human-readable description of the Security Event Token
      Delivery Error Code.

   Change Controller
      For error codes registered by the IETF or its working groups, list
      "IETF Secevent Working Group".  For all other error codes, list
      the name of the party responsible for the registration.  Contact
      information such as mailing address, email address, or phone
      number may also be provided.

   Defining Document(s)
      A reference to the document or documents that define the Security
      Event Token Delivery Error Code.  The definition MUST specify the
      name and description of the error code, and explain under what
      circumstances the error code may be used.  URIs that can be used
      to retrieve copies of each document at no cost SHOULD be included.

6.1.2.  Initial Registry Contents

   o

      Error Code
         json

      Description
         Invalid JSON object.

      Change Controller
         IETF Secevent Working Group

      Defining Document(s)
         Section 2.3.3 of this document.

   o

      Error Code
         jwtParse

      Description
         Invalid or unparsable JWT or JSON structure.

      Change Controller
         IETF Secevent Working Group

      Defining Document(s)
         Section 2.3.3 of this document.

   o



Backman, et al.          Expires March 29, 2019                 [Page 9]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


      Error Code
         jwtHdr

      Description
         An invalid JWT header was detected.

      Change Controller
         IETF Secevent Working Group

      Defining Document(s)
         Section 2.3.3 of this document.

   o

      Error Code
         jwtCrypto

      Description
         Unable to parse due to unsupported algorithm.

      Change Controller
         IETF Secevent Working Group

      Defining Document(s)
         Section 2.3.3 of this document.

   o

      Error Code
         jws

      Description
         Signature was not validated.

      Change Controller
         IETF Secevent Working Group

      Defining Document(s)
         Section 2.3.3 of this document.

   o

      Error Code
         jwe

      Description
         Unable to decrypt JWE encoded data.




Backman, et al.          Expires March 29, 2019                [Page 10]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


      Change Controller
         IETF Secevent Working Group

      Defining Document(s)
         Section 2.3.3 of this document.

   o

      Error Code
         jwtAud

      Description
         Invalid audience value.

      Change Controller
         IETF Secevent Working Group

      Defining Document(s)
         Section 2.3.3 of this document.

   o

      Error Code
         jwtIss

      Description
         Issuer not recognized.

      Change Controller

      Defining Document(s)
         Section 2.3.3 of this document.

   o

      Error Code
         setType

      Description
         An unexpected Event type was received.

      Change Controller
         IETF Secevent Working Group

      Defining Document(s)
         Section 2.3.3 of this document.

   o



Backman, et al.          Expires March 29, 2019                [Page 11]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


      Error Code
         setParse

      Description
         Invalid structure was encountered such as an inability to parse
         or an incomplete set of Event claims.

      Change Controller
         IETF Secevent Working Group

      Defining Document(s)
         Section 2.3.3 of this document.

   o

      Error Code
         setData

      Description
         SET event claims incomplete or invalid.

      Change Controller
         IETF Secevent Working Group

      Defining Document(s)
         Section 2.3.3 of this document.

   o

      Error Code
         dup

      Description
         A duplicate SET was received and has been ignored.

      Change Controller
         IETF Secevent Working Group

      Defining Document(s)
         Section 2.3.3 of this document.

7.  References

7.1.  Normative References







Backman, et al.          Expires March 29, 2019                [Page 12]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997, <https://www.rfc-
              editor.org/info/rfc2119>.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, DOI 10.17487/RFC3986, January 2005,
              <https://www.rfc-editor.org/info/rfc3986>.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,
              DOI 10.17487/RFC5246, August 2008, <https://www.rfc-
              editor.org/info/rfc5246>.

   [RFC5988]  Nottingham, M., "Web Linking", RFC 5988,
              DOI 10.17487/RFC5988, October 2010, <https://www.rfc-
              editor.org/info/rfc5988>.

   [RFC6125]  Saint-Andre, P. and J. Hodges, "Representation and
              Verification of Domain-Based Application Service Identity
              within Internet Public Key Infrastructure Using X.509
              (PKIX) Certificates in the Context of Transport Layer
              Security (TLS)", RFC 6125, DOI 10.17487/RFC6125, March
              2011, <https://www.rfc-editor.org/info/rfc6125>.

   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <https://www.rfc-editor.org/info/rfc7159>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014, <https://www.rfc-
              editor.org/info/rfc7231>.

   [RFC7517]  Jones, M., "JSON Web Key (JWK)", RFC 7517,
              DOI 10.17487/RFC7517, May 2015, <https://www.rfc-
              editor.org/info/rfc7517>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <https://www.rfc-editor.org/info/rfc7519>.

   [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,
              "Recommendations for Secure Use of Transport Layer
              Security (TLS) and Datagram Transport Layer Security
              (DTLS)", BCP 195, RFC 7525, DOI 10.17487/RFC7525, May
              2015, <https://www.rfc-editor.org/info/rfc7525>.



Backman, et al.          Expires March 29, 2019                [Page 13]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, "Guidelines for
              Writing an IANA Considerations Section in RFCs", BCP 26,
              RFC 8126, DOI 10.17487/RFC8126, June 2017,
              <https://www.rfc-editor.org/info/rfc8126>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8417]  Hunt, P., Ed., Jones, M., Denniss, W., and M. Ansari,
              "Security Event Token (SET)", RFC 8417,
              DOI 10.17487/RFC8417, July 2018, <https://www.rfc-
              editor.org/info/rfc8417>.

7.2.  Informative References

   [openid-connect-core]
              NRI, "OpenID Connect Core 1.0", Nov 2014.

   [RFC3339]  Klyne, G. and C. Newman, "Date and Time on the Internet:
              Timestamps", RFC 3339, DOI 10.17487/RFC3339, July 2002,
              <https://www.rfc-editor.org/info/rfc3339>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/info/rfc6749>.

   [RFC6750]  Jones, M. and D. Hardt, "The OAuth 2.0 Authorization
              Framework: Bearer Token Usage", RFC 6750,
              DOI 10.17487/RFC6750, October 2012, <https://www.rfc-
              editor.org/info/rfc6750>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <https://www.rfc-editor.org/info/rfc7230>.

   [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Authentication", RFC 7235,
              DOI 10.17487/RFC7235, June 2014, <https://www.rfc-
              editor.org/info/rfc7235>.

   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", RFC 7515, DOI 10.17487/RFC7515, May
              2015, <https://www.rfc-editor.org/info/rfc7515>.






Backman, et al.          Expires March 29, 2019                [Page 14]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


   [RFC7516]  Jones, M. and J. Hildebrand, "JSON Web Encryption (JWE)",
              RFC 7516, DOI 10.17487/RFC7516, May 2015,
              <https://www.rfc-editor.org/info/rfc7516>.

   [RFC7521]  Campbell, B., Mortimore, C., Jones, M., and Y. Goland,
              "Assertion Framework for OAuth 2.0 Client Authentication
              and Authorization Grants", RFC 7521, DOI 10.17487/RFC7521,
              May 2015, <https://www.rfc-editor.org/info/rfc7521>.

   [RFC7617]  Reschke, J., "The 'Basic' HTTP Authentication Scheme",
              RFC 7617, DOI 10.17487/RFC7617, September 2015,
              <https://www.rfc-editor.org/info/rfc7617>.

   [saml-core-2.0]
              Internet2, "Assertions and Protocols for the OASIS
              Security Assertion Markup Language (SAML) V2.0", March
              2005.

Appendix A.  Other Streaming Specifications

   [[EDITORS NOTE: This section to be removed prior to publication]]

   The following pub/sub, queuing, streaming systems were reviewed as
   possible solutions or as input to the current draft:

   XMPP Events

   The WG considered the XMPP events ands its ability to provide a
   single messaging solution without the need for both polling and push
   modes.  The feeling was the size and methodology of XMPP was to far
   apart from the current capabilities of the SECEVENTs community which
   focuses in on HTTP based service delivery and authorization.

   Amazon Simple Notification Service

   Simple Notification Service, is a pub/sub messaging product from AWS.
   SNS supports a variety of subscriber types: HTTP/HTTPS endpoints, AWS
   Lambda functions, email addresses (as JSON or plain text), phone
   numbers (via SMS), and AWS SQS standard queues.  It doesn't directly
   support pull, but subscribers can get the pull model by creating an
   SQS queue and subscribing it to the topic.  Note that this puts the
   cost of pull support back onto the subscriber, just as it is in the
   push model.  It is not clear that one way is strictly better than the
   other; larger, sophisticated developers may be happy to own message
   persistence so they can have their own internal delivery guarantees.
   The long tail of OIDC clients may not care about that, or may fail to
   get it right.  Regardless, I think we can learn something from the
   Delivery Policies supported by SNS, as well as the delivery controls



Backman, et al.          Expires March 29, 2019                [Page 15]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


   that SQS offers (e.g.  Visibility Timeout, Dead-Letter Queues).  I'm
   not suggesting that we need all of these things in the spec, but they
   give an idea of what features people have found useful.

   Other information:

   o  API Reference:
      http://docs.aws.amazon.com/AWSSimpleQueueService/latest/
      APIReference/Welcome.html

   o  Visibility Timeouts:
      http://docs.aws.amazon.com/AWSSimpleQueueService/latest/
      SQSDeveloperGuide/sqs-visibility-timeout.html

   Apache Kafka

   Apache Kafka is an Apache open source project based upon TCP for
   distributed streaming.  It prescribes some interesting general
   purpose features that seem to extend far beyond the simpler streaming
   model SECEVENTs is after.  A comment from MS has been that Kafka does
   an acknowledge with poll combination event which seems to be a
   performance advantage.  See: https://kafka.apache.org/intro

   Google Pub/Sub

   Google Pub Sub system favours a model whereby polling and
   acknowledgement of events is done as separate endpoints as separate
   functions.

   Information:

   o  Cloud Overview - https://cloud.google.com/pubsub/

   o  Subscriber Overview - https://cloud.google.com/pubsub/docs/
      subscriber

   o  Subscriber Pull(poll) - https://cloud.google.com/pubsub/docs/pull

Appendix B.  Acknowledgments

   The editors would like to thanks the members of the SCIM WG which
   began discussions of provisioning events starting with: draft-hunt-
   scim-notify-00 in 2015.

   The editors would like to thank the authors of draft-ietf-secevent-
   delivery-02, on which this draft is based.





Backman, et al.          Expires March 29, 2019                [Page 16]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


   The editor would like to thank the participants in the the SECEVENTS
   working group for their support of this specification.

Appendix C.  Change Log

   Draft 00 - AB - Based on draft-ietf-secevent-delivery-02 with the
   following changes:

   o  Renamed to "Push-Based SET Token Delivery Using HTTP"

   o  Removed references to the HTTP Polling delivery method.

   o  Removed informative reference to RFC6202.

   Draft 01 - AB:

   o  Fixed area and workgroup to match secevent.

   o  Removed unused definitions and definitions already covered by SET.

   o  Renamed Event Transmitter and Event Receiver to SET Transmitter
      and SET Receiver, respectively.

   o  Added IANA registry for SET Delivery Error Codes.

   o  Removed enumeration of HTTP authentication methods.

   o  Removed generally applicable guidance for HTTP, authorization
      tokens, and bearer tokens.

   o  Moved guidance for using authentication methods as DoS protection
      to Security Considerations.

   o  Removed redundant instruction to use WWW-Authenticate header.

   o  Removed further generally applicable guidance for authorization
      tokens.

   o  Removed bearer token from example delivery request, and text
      referencing it.

   o  Broke delivery method description into separate request/response
      sections.

   o  Added missing empty line between headers and body in example
      request.

   o  Removed unapplicable notes about example formatting.



Backman, et al.          Expires March 29, 2019                [Page 17]

Internet-Draft        draft-ietf-secevent-http-push       September 2018


   o  Removed text about SET creation and handling.

   o  Removed duplication in protocol description.

   o  Added "non-normative example" text to example transmission
      request.

   o  Fixed inconsistencies in use of Error Code term.

Authors' Addresses

   Annabelle Backman (editor)
   Amazon

   Email: richanna@amazon.com


   Michael B. Jones (editor)
   Microsoft

   Email: mbj@microsoft.com
   URI:   http://self-issued.info/


   Phil Hunt (editor)
   Oracle Corporation

   Email: phil.hunt@yahoo.com


   Marius Scurtescu
   Google

   Email: mscurtescu@google.com


   Morteza Ansari
   Cisco

   Email: morteza.ansari@cisco.com


   Anthony Nadalin
   Microsoft

   Email: tonynad@microsoft.com





Backman, et al.          Expires March 29, 2019                [Page 18]
